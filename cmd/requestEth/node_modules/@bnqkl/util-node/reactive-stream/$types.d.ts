import { $PromiseMaybe } from "../typings/$types.js";
import { ReactiveStream } from "./ReactiveStream.js";
export declare type $ReactiveStream<T = unknown> = ReactiveStream<T>;
export declare namespace $ReactiveStream {
    type Map<I = unknown, O = unknown> = (event: Map.Event<I>) => O;
    namespace Map {
        type Event<T> = {
            data: T;
            index: number;
            statement: LoopStatement | undefined;
            target: $ReactiveStream<T>;
        };
        type LoopStatement = "continue" | "break" | "return";
    }
    type Filter<I = unknown, O extends I = I> = ((item: I, index: number, ctx: $ReactiveStream<I>) => $PromiseMaybe<boolean>) | ((item: I, index: number, ctx: $ReactiveStream<I>) => item is O);
    namespace Filter {
        type GetInput<F> = F extends Filter<infer Input, infer _> ? Input : never;
        type GetOutput<F> = F extends Filter<infer _, infer Output> ? Output : never;
        type ToMap<F> = F extends Filter<infer I, infer O> ? Map<I, O> : never;
    }
    type $Controller = {};
    type GetType<RS> = RS extends ReactiveStream<infer T> ? T : never;
}
