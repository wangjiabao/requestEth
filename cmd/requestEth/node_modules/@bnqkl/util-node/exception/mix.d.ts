import { ModuleStroge } from "../dep_inject/index.js";
export declare enum EXCEPTION_INJECT_SYMBOL {
    PLATFORM = "exception.platform",
    CHANNEL = "exception.channel",
    BUSINESS = "exception.business"
}
export declare function RegisterExceptionGeneratorDefiner(opts: {
    platform?: string;
    channel?: string;
    business?: string;
}): (moduleName: string, fileName: string, opts: {
    errorCodeMap: Map<string, string>;
    platformName?: string;
    channelName?: string;
    businessName?: string;
}) => {
    readonly log: import("../logger/$types.js").$Pinter;
    readonly info: import("../logger/$types.js").$Pinter;
    readonly warn: import("../logger/$types.js").$Pinter;
    readonly success: import("../logger/$types.js").$Pinter;
    readonly trace: import("../logger/$types.js").$Pinter;
    readonly error: import("../logger/$types.js").$Pinter;
} & {
    getException: <E extends import("../exception-generator/$types.js").$Exception, C extends abstract new () => E>(Con: C) => import("../exception-generator/$types.js").$ExceptionConstructor<E>;
    readonly Exception: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly OutOfRangeException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentIllegalException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentFormatException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly NoFoundException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ResponseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly IOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly NetworkIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly BusyIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly DatebaseIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly InterruptedException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly IllegalStateException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly TimeOutException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly BusyException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ConsensusException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly AbortException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly RefuseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
};
export declare class SingleCustomException {
    moduleMap: ModuleStroge;
    constructor(moduleMap: ModuleStroge);
    platformName?: string;
    channelName?: string;
    businessName?: string;
    exceptionGeneratorDefiner: (moduleName: string, fileName: string, opts: {
        errorCodeMap: Map<string, string>;
        platformName?: string | undefined;
        channelName?: string | undefined;
        businessName?: string | undefined;
    }) => {
        readonly log: import("../logger/$types.js").$Pinter;
        readonly info: import("../logger/$types.js").$Pinter;
        readonly warn: import("../logger/$types.js").$Pinter;
        readonly success: import("../logger/$types.js").$Pinter;
        readonly trace: import("../logger/$types.js").$Pinter;
        readonly error: import("../logger/$types.js").$Pinter;
    } & {
        getException: <E extends import("../exception-generator/$types.js").$Exception, C extends abstract new () => E>(Con: C) => import("../exception-generator/$types.js").$ExceptionConstructor<E>;
        readonly Exception: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly OutOfRangeException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly ArgumentException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly ArgumentIllegalException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly ArgumentFormatException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly NoFoundException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly ResponseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly IOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly NetworkIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly BusyIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly DatebaseIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly InterruptedException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly IllegalStateException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly TimeOutException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly BusyException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly ConsensusException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly AbortException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
        readonly RefuseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    };
}
export declare function UtilExceptionGenerator(moduleName: string, fileName: string, opts?: {
    errorCodeMap: Map<string, string>;
    platformName?: string;
    channelName?: string;
    businessName?: string;
}): {
    readonly log: import("../logger/$types.js").$Pinter;
    readonly info: import("../logger/$types.js").$Pinter;
    readonly warn: import("../logger/$types.js").$Pinter;
    readonly success: import("../logger/$types.js").$Pinter;
    readonly trace: import("../logger/$types.js").$Pinter;
    readonly error: import("../logger/$types.js").$Pinter;
} & {
    getException: <E extends import("../exception-generator/$types.js").$Exception, C extends abstract new () => E>(Con: C) => import("../exception-generator/$types.js").$ExceptionConstructor<E>;
    readonly Exception: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly OutOfRangeException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentIllegalException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ArgumentFormatException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly NoFoundException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ResponseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly IOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly NetworkIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly BusyIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly DatebaseIOException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly InterruptedException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly IllegalStateException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly TimeOutException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly BusyException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly ConsensusException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly AbortException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
    readonly RefuseException: import("../exception-generator/$types.js").$ExceptionConstructor<import("../exception-generator/$types.js").$Exception>;
};
