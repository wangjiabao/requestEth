import { $EventOptions, $MutArg, $MutArgEventHandler, $UnknownMutArg } from "../event-base/$types.js";
export interface $EventEmitter<EM = {}> {
    on<K extends keyof EM>(eventname: K, handler: $MutArgEventHandler<EM[K]>, opts?: $EventOptions): unknown;
    once<K extends keyof EM>(eventname: K, handler: $MutArgEventHandler<EM[K]>, opts?: $EventOptions): unknown;
    off<K extends keyof EM>(eventname: K, handler?: $MutArgEventHandler<EM[K]>): unknown;
    emit<K extends keyof EM>(eventname: K, ...data: $MutArg<EM[K]>): unknown;
    TYPE: EM;
}
/**
 * 混合事件，可以用于动态与静态结合
 * 静态确保内部逻辑正确性
 * 动态用于生成实例后的拓展方法的正确性
 */
export declare type $EventEmitterMix<EM1, EM2> = {
    on<K extends keyof EM1>(eventname: K, handler: $MutArgEventHandler<EM1[K]>, opts?: $EventOptions): unknown;
    on<K extends keyof EM2>(eventname: K, handler: $MutArgEventHandler<EM2[K]>, opts?: $EventOptions): unknown;
    once<K extends keyof EM1>(eventname: K, handler: $MutArgEventHandler<EM1[K]>, opts?: $EventOptions): unknown;
    once<K extends keyof EM2>(eventname: K, handler: $MutArgEventHandler<EM2[K]>, opts?: $EventOptions): unknown;
    off<K extends keyof EM1>(eventname: K, handler?: $MutArgEventHandler<EM1[K]>): unknown;
    off<K extends keyof EM2>(eventname: K, handler?: $MutArgEventHandler<EM2[K]>): unknown;
    emit<K extends keyof EM1>(eventname: K, ...data: $MutArg<EM1[K]>): unknown;
    emit<K extends keyof EM2>(eventname: K, ...data: $MutArg<EM2[K]>): unknown;
    TYPE: EM1 | EM2;
};
export interface $EventMap {
    [key: string]: $UnknownMutArg;
}
export declare type $OnceEventOptions = Omit<$EventOptions, "once">;
export declare type $EventHanldersMap<EM> = {
    [key in keyof EM]?: Map<$MutArgEventHandler<EM[key]>, $EventOptions>;
};
declare type _EM_To_Object<EM> = {
    [K in keyof EM]: {
        eventname: K;
        args: EM[K];
    };
};
declare type _EMObjectList<EM> = _EM_To_Object<EM>[keyof _EM_To_Object<EM>];
export declare type $InnerErrorHanlderArg<EM, EMOL extends _EMObjectList<EM> = _EMObjectList<EM>> = [unknown, EMOL];
export declare type $InnerErrorHandler<EM> = $MutArgEventHandler<$InnerErrorHanlderArg<EM>>;
export declare type $InnerAnyHandlerArg<EM> = [_EMObjectList<EM>];
export declare type $InnerAnyHandler<EM> = $MutArgEventHandler<$InnerAnyHandlerArg<EM>>;
export {};
