import { EVENT_DESCRIPTION_SYMBOL, $EventOptions } from "../event-base/index.js";
import { $EventInOutMap, $QueneEventEmitter, $InOutEventHandler, $InnerErrorInOutHandler } from "./$types.js";
/**一个极简的事件管理模块 */
export declare class QueneEventEmitter<EM extends $EventInOutMap> implements $QueneEventEmitter<EM> {
    TYPE: EM;
    private _e;
    /**
     * 增加监听事件
     * @param eventname 事件名
     * @param handler 处理函数
     */
    on<K extends keyof EM>(eventname: K, handler: $InOutEventHandler<EM[K]>, opts?: $EventOptions): void;
    /**一次性事件监听 */
    once<K extends keyof EM>(eventname: K, handler: $InOutEventHandler<EM[K]>, opts?: Omit<$EventOptions, "once">): void;
    /**
     * 判断事件是否被监听
     * @param eventname 事件名
     * @param handler 处理函数
     */
    has<K extends keyof EM>(eventname: K, handler?: $InOutEventHandler<EM[K]>): boolean;
    /**
     * 取消事件监听
     * @param eventname 事件名
     * @param handler 处理函数
     */
    off<K extends keyof EM>(eventname: K, handler: $InOutEventHandler<EM[K]>): boolean;
    get [EVENT_DESCRIPTION_SYMBOL](): string;
    /**触发事件监听 */
    emit<K extends keyof EM>(eventname: K, data: EM[K]["in"]): EM[K]["out"] | Promise<EM[K]["out"]> | undefined;
    emitToAsyncGenerator<K extends keyof EM>(eventname: K, data: EM[K]["in"]): AsyncGenerator<unknown, void | Awaited<EM[K]["out"]>, unknown>;
    clear(opts?: {
        ignoreCustomErrorHanlder?: boolean;
    }): void;
    get removeAllListeners(): (opts?: {
        ignoreCustomErrorHanlder?: boolean | undefined;
    }) => void;
    get addListener(): <K extends keyof EM>(eventname: K, handler: $InOutEventHandler<EM[K]>, opts?: $EventOptions) => void;
    get removeListener(): <K extends keyof EM>(eventname: K, handler: $InOutEventHandler<EM[K]>) => boolean;
    /**
     * 触发内部的异常处理函数
     * @param err
     * @param han
     * @param name
     */
    protected _emitErrorHanlder<K extends keyof EM>(err: unknown, eventname: K, arg: EM[K]["in"]): void;
    /**是否由过自定义异常处理 */
    private _hasEmitErrorHandlerSet?;
    private get _emitErrorHandlerSet();
    /**
     * 自定义函数执行异常处理器
     * @param errorHandler
     */
    onError(errorHandler: $InnerErrorInOutHandler<EM>, taskname?: string): void;
    /**
     * 移除自定义函数的执行异常处理器
     * @param errorHandler
     */
    offError(errorHandler?: $InnerErrorInOutHandler<EM>): boolean;
}
