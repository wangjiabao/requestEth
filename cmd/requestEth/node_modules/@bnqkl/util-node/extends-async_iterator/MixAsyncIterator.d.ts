import { $MixAsyncIterator } from "./$types.js";
export declare class MixAsyncIterator<T extends $MixAsyncIterator.AG = $MixAsyncIterator.AG> {
    private _allGenList;
    join(runner: AsyncIterator<T[0], T[1], T[2]>, opts?: {
        name?: string;
        bench?: boolean;
        jumpGun?: number;
    }): $MixAsyncIterator.Gen<T, boolean>;
    private _join;
    remove(gen: $MixAsyncIterator.Gen<T>): boolean;
    private _enqueueGen;
    private _dequeueGen;
    /**正在执行中的任务，等待返回后就从这个集合中移除 */
    private _runnings;
    private _handleGen;
    /**候补队列 */
    private _benchGen;
    /**自由队列 */
    private _freeGen;
    private _genWaitter;
    /**入列
     * 这个函数与_handleGen是紧密关联的，是_handleGen的一部分
     */
    private _enqueueResult;
    /**出列 */
    private _dequeueResult;
    private _freeResult;
    private _benchResult;
    private _resultWaiter;
    next(): $MixAsyncIterator.ResultWithFrom<T, true> | $MixAsyncIterator.ResultWithFrom<T, false> | Promise<$MixAsyncIterator.Result<T>>;
    get isDone(): boolean;
    toAsyncIterator(): AsyncGenerator<Awaited<T[0]>, void, unknown>;
    toPromise(): Promise<void>;
}
