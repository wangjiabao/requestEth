import { $Lock } from "./$types.js";
export declare class AtomLock<K extends $Lock.AtomLockKey = $Lock.TransferableAtomLockKey> {
    key: K;
    readonly uid: number;
    constructor(key: K);
    is_finished: boolean;
    private _cbs;
    then(cb: Function): void;
    after_unlock?: () => any;
    unlock(): void;
}
export declare function isAtomLockKey(key: unknown): key is $Lock.AtomLockKey;
export declare class AtomLocksRef<K extends $Lock.AtomLockKey = $Lock.TransferableAtomLockKey> {
    cur_job_map: Map<K, AtomLock<K>>;
    pre_job_map: Map<K, AtomLock<K>>;
    uid: number;
    cur_index: Map<number, AtomLock<K>>;
    pre_index: Map<number, AtomLock<K>>;
    constructor(cur_job_map: Map<K, AtomLock<K>>, pre_job_map: Map<K, AtomLock<K>>, cur_index?: Map<number, AtomLock<K>>, pre_index?: Map<number, AtomLock<K>>);
    finish(ids: Iterable<K> | K): void;
    finishAll(): void;
    getPreJobsDone(): Promise<void>;
    getJobsDone(): Promise<void>;
}
export declare class AtomLocksManager<K extends $Lock.AtomLockKey = $Lock.TransferableAtomLockKey> {
    private _map;
    constructor();
    static isLockKey(id: unknown): boolean;
    appendLocksWithDetail(ids: Iterable<K>): {
        locksRef: AtomLocksRef<K>;
        pre_lock_index_list: number[];
        is_over_uint8: boolean;
        is_over_uint16: boolean;
    };
    appendLocks(ids: Iterable<K>): AtomLocksRef<K>;
    getLocks(ids: K[]): AtomLocksRef<any>;
}
