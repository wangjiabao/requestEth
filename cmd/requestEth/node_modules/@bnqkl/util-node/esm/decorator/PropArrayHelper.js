import { __decorate, __metadata } from "tslib";
import { bindThis } from "./bindThis.js";
// 存储在原型链上的数据（字符串）集合
export class PropArrayHelper {
    constructor(pid = Math.random().toString(36).slice(2)) {
        Object.defineProperty(this, "pid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pid
        });
        Object.defineProperty(this, "PA_ID_KEY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "CLASS_PROTO_ARRAYDATA_POOL", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "PA_ID_VALUE", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        this.PA_ID_KEY = Symbol(`@PAID:${pid}`);
    }
    get(target, key) {
        const res = new Set();
        const CLASS_PROTO_ARRAYDATA = this.CLASS_PROTO_ARRAYDATA_POOL.get(key);
        if (CLASS_PROTO_ARRAYDATA) {
            do {
                if (target.hasOwnProperty(this.PA_ID_KEY)) {
                    const arr_data = CLASS_PROTO_ARRAYDATA.get(target[this.PA_ID_KEY]);
                    if (arr_data) {
                        for (const item of arr_data) {
                            res.add(item);
                        }
                    }
                }
            } while ((target = Object.getPrototypeOf(target)));
        }
        return res;
    }
    add(target, key, value) {
        let CLASS_PROTO_ARRAYDATA = this.CLASS_PROTO_ARRAYDATA_POOL.get(key);
        if (!CLASS_PROTO_ARRAYDATA) {
            CLASS_PROTO_ARRAYDATA = new Map();
            this.CLASS_PROTO_ARRAYDATA_POOL.set(key, CLASS_PROTO_ARRAYDATA);
        }
        const pa_id = target.hasOwnProperty(this.PA_ID_KEY)
            ? target[this.PA_ID_KEY]
            : (target[this.PA_ID_KEY] = Symbol(`@PAID:${this.pid}#${this.PA_ID_VALUE++}`));
        let arr_data = CLASS_PROTO_ARRAYDATA.get(pa_id);
        if (!arr_data) {
            arr_data = [value];
            CLASS_PROTO_ARRAYDATA.set(pa_id, arr_data);
        }
        else {
            arr_data.push(value);
        }
    }
    remove(target, key, value) {
        const CLASS_PROTO_ARRAYDATA = this.CLASS_PROTO_ARRAYDATA_POOL.get(key);
        if (!CLASS_PROTO_ARRAYDATA) {
            return;
        }
        do {
            if (!target.hasOwnProperty(this.PA_ID_KEY)) {
                break;
            }
            const pa_id = target[this.PA_ID_KEY];
            const arr_data = CLASS_PROTO_ARRAYDATA.get(pa_id);
            if (!arr_data) {
                return;
            }
            const index = arr_data.indexOf(value);
            if (index !== -1) {
                arr_data.splice(index, 1);
                return;
            }
        } while ((target = Object.getPrototypeOf(target)));
    }
}
__decorate([
    bindThis,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], PropArrayHelper.prototype, "get", null);
__decorate([
    bindThis,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", void 0)
], PropArrayHelper.prototype, "add", null);
__decorate([
    bindThis,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", void 0)
], PropArrayHelper.prototype, "remove", null);
