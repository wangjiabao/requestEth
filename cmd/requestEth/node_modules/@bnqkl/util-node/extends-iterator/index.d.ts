export * from "../extends-iterator-is/index.js";
/**
 * 混合排序输出
 * @param iteratorA
 * @param iteratorB
 * @param compareFu
 */
export declare function mixSortAsyncIterator<T>(iteratorA: AsyncIterableIterator<T> | IterableIterator<T>, iteratorB: AsyncIterableIterator<T> | IterableIterator<T>, compareFu: (a: T, b: T) => number): AsyncGenerator<Awaited<T>, void, undefined>;
/**
 * 混合排序输出
 * @param iteratorA
 * @param iteratorB
 * @param compareFu
 */
export declare function mixSortIterator<T>(iteratorA: IterableIterator<T>, iteratorB: IterableIterator<T>, compareFu: (a: T, b: T) => number): Generator<T, void, undefined>;
/**
 * 对迭代器的结果进行了长度约束
 * @param iteratorSource
 * @param limitOpts
 */
export declare function limitAsyncIterator<T>(iteratorSource: AsyncIterable<T>, limitOpts: {
    limit: number;
    tryKeepAborter?: (item: T, preItem?: T) => boolean;
}): AsyncGenerator<Awaited<T>, void, unknown>;
/**
 * 对迭代器的结果进行了长度约束
 * @param iteratorSource
 * @param limitOpts
 */
export declare function limitIterator<T>(iteratorSource: Iterable<T>, limitOpts: {
    limit: number;
    tryKeepAborter?: (item: T, preItem?: T) => boolean;
}): Generator<T, void, unknown>;
/**
 * 过滤迭代器的结果
 * @param iteratorSource
 * @param mapper
 */
export declare function filterAsyncIterator<T>(iteratorSource: AsyncIterable<T> | Iterable<T>, filter: (item: T) => boolean): AsyncGenerator<Awaited<T>, void, unknown>;
/**
 * 过滤迭代器的结果
 * @param iteratorSource
 * @param mapper
 */
export declare function filterIterator<T>(iteratorSource: Iterable<T>, filter: (item: T) => boolean): Generator<T, void, unknown>;
/**
 * 转换迭代器的输出
 * @param iteratorSource
 * @param mapper
 */
export declare function mapAsyncIterator<I, O>(iteratorSource: AsyncIterable<I> | Iterable<I>, mapper: (item: I) => O): AsyncGenerator<Awaited<O>, void, unknown>;
/**
 * 转换迭代器的输出
 * @param iteratorSource
 * @param mapper
 */
export declare function mapIterator<I, O>(iteratorSource: Iterable<I>, mapper: (item: I) => O): Generator<O, void, unknown>;
