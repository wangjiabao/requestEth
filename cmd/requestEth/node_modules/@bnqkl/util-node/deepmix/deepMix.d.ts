declare type DeepMix<L extends unknown[]> = L extends [] ? {} : _DeepMix1<L>;
declare type _FUN<L extends unknown[]> = (...args: L) => void;
declare type _DeepMix1<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, ...rest: infer A2) => void ? A1 & _DeepMix2<A2> : {};
declare type _DeepMix2<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, ...rest: infer A2) => void ? A1 & _DeepMix3<A2> : {};
declare type _DeepMix3<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, ...rest: infer A2) => void ? A1 & _DeepMix4<A2> : {};
declare type _DeepMix4<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, ...rest: infer A2) => void ? A1 & _DeepMix5<A2> : {};
declare type _DeepMix5<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, ...rest: infer A2) => void ? A1 & _DeepMix6<A2> : {};
declare type _DeepMix6<L extends unknown[]> = _FUN<L> extends (a: infer A1) => void ? A1 : _FUN<L> extends (a: infer A1, b: infer A2) => void ? A1 & A2 : any;
export declare function deepMix<L extends unknown[]>(...unsafeObjList: L): DeepMix<L>;
export {};
