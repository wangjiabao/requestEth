"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlizzardHash = void 0;
class BlizzardHash {
    static InitCryptTable() {
        const cryptTable = new Array(0x500);
        let seed = 0x00100001;
        let index1 = 0;
        let index2 = 0;
        let i;
        let temp1;
        let temp2;
        for (index1 = 0; index1 < 0x100; index1++) {
            for (index2 = index1, i = 0; i < 5; i++, index2 += 0x100) {
                seed = (seed * 125 + 3) % 0x2aaaab;
                temp1 = (seed & 0xffff) << 0x10;
                seed = (seed * 125 + 3) % 0x2aaaab;
                temp2 = seed & 0xffff;
                cryptTable[index2] = temp1 | temp2;
            }
        }
        return cryptTable;
    }
    static hashString(lpszString, dwHashType) {
        const { cryptTable, cryptTable_length } = BlizzardHash;
        let seed1 = 0x7fed7fed;
        let seed2 = 0xeeeeeeee;
        let ch;
        for (let i = 0; i < lpszString.length; i += 1) {
            ch = ((dwHashType << 8) + lpszString.charCodeAt(i)) % cryptTable_length;
            seed1 = cryptTable[ch] ^ (seed1 + seed2);
            seed2 = ch + seed1 + seed2 + (seed2 << 5) + 3;
        }
        return seed1;
    }
    static inRangePosition(v) {
        const { hashRange } = BlizzardHash;
        return ((v - hashRange.min) / hashRange.dis) % 1;
    }
    static hashToRandom(lpszString, dwHashType, min = 0, max = 1, parseToInt) {
        const num_hash = BlizzardHash.hashString(lpszString, dwHashType);
        const num_rate = (num_hash - BlizzardHash.hashRange.min) / BlizzardHash.hashRange.dis;
        const num_random = num_rate * (max - min) + min;
        if (parseToInt) {
            return Math.floor(num_random);
        }
        else {
            return num_random;
        }
    }
}
exports.BlizzardHash = BlizzardHash;
Object.defineProperty(BlizzardHash, "cryptTable", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Object.freeze(BlizzardHash.InitCryptTable())
});
Object.defineProperty(BlizzardHash, "cryptTable_length", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: BlizzardHash.cryptTable.length
});
Object.defineProperty(BlizzardHash, "hashRange", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Object.freeze({
        min: -2147483648,
        max: 2147483647,
        dis: Math.pow(2, 32),
    })
});
