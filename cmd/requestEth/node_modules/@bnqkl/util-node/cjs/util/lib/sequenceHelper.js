"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequenceHelper = void 0;
const index_js_1 = require("../../event/index.js");
const index_js_2 = require("../../extends-promise-out/index.js");
const index_js_3 = require("../../typings/index.js");
class SequenceHelper extends index_js_1.EventEmitter {
    constructor() {
        super();
        Object.defineProperty(this, "__tasks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "__results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "__isDoingJob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.on("doJob", () => {
            (0, index_js_3.$ignoreAwait)(this.__doJob());
        });
    }
    execTask(task, ...args) {
        const job = { func: task, args, promiseOut: new index_js_2.PromiseOut() };
        this.__tasks.push(job);
        this.__results.push(job.promiseOut);
        this.emit("doJob");
        return job.promiseOut.promise;
    }
    execTaskWithoutPushResult(task, ...args) {
        const job = { func: task, args, promiseOut: new index_js_2.PromiseOut() };
        this.__tasks.push(job);
        this.emit("doJob");
        return job.promiseOut.promise;
    }
    async __doJob() {
        if (!this.__isDoingJob) {
            this.__isDoingJob = true;
            do {
                const job = this.__tasks.shift();
                if (job) {
                    let r;
                    try {
                        r = await job.func(...job.args);
                        job.promiseOut.resolve(r);
                    }
                    catch (error) {
                        job.promiseOut.reject(error);
                    }
                }
                else {
                    break;
                }
            } while (true);
            this.__isDoingJob = false;
        }
        else {
            return;
        }
    }
    async doAll() {
        const r = await Promise.all(this.__results.map((v) => v.promise));
        this.__results = [];
        return r;
    }
    /**
     * 清空队列
     *
     */
    clearQueue() {
        this.__tasks = [];
        this.__results = [];
    }
}
exports.SequenceHelper = SequenceHelper;
