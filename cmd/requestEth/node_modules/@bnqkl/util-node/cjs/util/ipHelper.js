"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpHelper = void 0;
const tslib_1 = require("tslib");
const index_js_1 = require("../dep_inject/index.js");
const index_js_2 = require("../decorator/index.js");
let IpHelper = class IpHelper {
    get v4() {
        return "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    }
    get v6seg() {
        return "[a-fA-F\\d]{1,4}";
    }
    get v6() {
        const { v4, v6seg } = this;
        return `
    (
    (?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
    (?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
    (?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
    (?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
    (?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
    (?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
    (?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
    (?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
    )(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1
    `
            .replace(/\/\/.*$/gm, "") // 去掉注释
            .replace(/(^\s+)|(\s+$)|\s+/g, "") // 去掉空格
            .replace(/\n/g, ""); // 去掉换行符
    }
    /**
     * 是否是一个 ip
     *
     * @param ip
     */
    isIp(ip) {
        const { v4, v6 } = this;
        const pattern = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
        return pattern.test(ip);
    }
    /**
     * 是否是一个 ipV4
     *
     * @param ipV4
     */
    isIpV4(ipV4) {
        const { v4 } = this;
        const pattern = new RegExp(`^${v4}$`);
        return pattern.test(ipV4);
    }
    /**
     * 是否是一个 ipV6
     *
     * @param ipV6
     */
    isIpV6(ipV6) {
        const { v6 } = this;
        const pattern = new RegExp(`^${v6}$`);
        return pattern.test(ipV6);
    }
    ipv4ToUint32(ip) {
        return ip
            .split(".")
            .reduce((acc, v, i) => acc + +v * Math.pow(256, 3 - i), 0);
    }
    uint32ToIpv4(ip) {
        // const l1 = ip / 256 ** 3;
        // const l2 = ip / 256 ** 2 - l1 * 256;
        // const l3 = ip / 256 - l1 * 256 ** 2 - l2**1;
        const l4 = ip % 256;
        const l3 = ((ip % 65536) / 256) | 0;
        const l2 = ((ip % 16777216) / 65536) | 0;
        const l1 = (ip / 16777216) | 0;
        return `${l1}.${l2}.${l3}.${l4}`;
    }
};
tslib_1.__decorate([
    index_js_2.cacheGetter,
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], IpHelper.prototype, "v4", null);
tslib_1.__decorate([
    index_js_2.cacheGetter,
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], IpHelper.prototype, "v6seg", null);
tslib_1.__decorate([
    index_js_2.cacheGetter,
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], IpHelper.prototype, "v6", null);
IpHelper = tslib_1.__decorate([
    (0, index_js_1.Injectable)()
], IpHelper);
exports.IpHelper = IpHelper;
