"use strict";
var I18N_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18N = exports.ERROR_CODE_LANG = void 0;
const tslib_1 = require("tslib");
///<reference lib="dom" />
const index_js_1 = require("../dep_inject/index.js");
exports.ERROR_CODE_LANG = Symbol("errorCodeLang");
let I18N = I18N_1 = class I18N {
    constructor(lang = "en_US.UTF-8" /* I18N_LANGUAGE_TYPE.ENGLISH */) {
        Object.defineProperty(this, "__lang", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "__store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        this.__checkLanguage(lang);
        this.__lang = lang;
    }
    static from(lang, moduleMap = new index_js_1.ModuleStroge()) {
        return (0, index_js_1.Resolve)(I18N_1, moduleMap.installMask(new index_js_1.ModuleStroge([[exports.ERROR_CODE_LANG, lang]])));
    }
    __checkLanguage(lang) {
        if (lang !== "zh_CN.UTF-8" /* I18N_LANGUAGE_TYPE.CHINESE */ &&
            lang !== "en_US.UTF-8" /* I18N_LANGUAGE_TYPE.ENGLISH */) {
            throw new Error(`Invalid lang type ${lang}`);
        }
    }
    getErrorCodeList(uuid) {
        const errorCodeList = this.__store.get(uuid);
        if (!errorCodeList) {
            throw new Error(`Failed to get error code list by ${uuid}`);
        }
        return errorCodeList.sourceErrorCodeList;
    }
    formatErrorCodeList(sourceErrorCodeList, translatedErrorCodeListMap) {
        const errorCodeList = translatedErrorCodeListMap.get(this.__lang);
        if (!errorCodeList) {
            console.debug(`Translated error code list not found, language ${this.__lang}`);
            return sourceErrorCodeList;
        }
        for (const key in sourceErrorCodeList) {
            const errorInfo = sourceErrorCodeList[key];
            errorInfo.message = errorCodeList[errorInfo.code] || errorInfo.message;
        }
        return sourceErrorCodeList;
    }
    addErrorCodeList(uuid, sourceErrorCodeList, translatedErrorCodeListMap) {
        this.formatErrorCodeList(sourceErrorCodeList, translatedErrorCodeListMap);
        this.__store.set(uuid, {
            sourceErrorCodeList,
            translatedErrorCodeListMap,
        });
    }
    setLanguage(newLang) {
        if (this.__lang === newLang) {
            return;
        }
        this.__checkLanguage(newLang);
        this.__lang = newLang;
        for (const { sourceErrorCodeList, translatedErrorCodeListMap, } of this.__store.values()) {
            this.formatErrorCodeList(sourceErrorCodeList, translatedErrorCodeListMap);
        }
    }
};
I18N = I18N_1 = tslib_1.__decorate([
    (0, index_js_1.Injectable)(),
    tslib_1.__param(0, (0, index_js_1.Inject)(exports.ERROR_CODE_LANG, { optional: true })),
    tslib_1.__metadata("design:paramtypes", [String])
], I18N);
exports.I18N = I18N;
