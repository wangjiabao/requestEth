"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilExceptionGenerator = exports.SingleCustomException = exports.RegisterExceptionGeneratorDefiner = exports.EXCEPTION_INJECT_SYMBOL = void 0;
const tslib_1 = require("tslib");
const index_js_1 = require("../exception-generator/index.js");
const index_js_2 = require("../exception-logger/index.js");
const index_js_3 = require("../platform/index.js");
const index_js_4 = require("../dep_inject/index.js");
function MixExceptionGenerator(PLATFORM, CHANNEL, BUSINESS, MODULE, FILE, ERROR_CODE_MAP) {
    let loggerNsp = `${CHANNEL.toLowerCase()}-${BUSINESS.toLowerCase()}`;
    if (MODULE) {
        loggerNsp += `:${MODULE}`;
    }
    if (FILE) {
        loggerNsp += `/${FILE}`;
    }
    const logs = (0, index_js_2.LogGenerator)(loggerNsp);
    const exps = (0, index_js_1.ExceptionGenerator)(PLATFORM, CHANNEL, BUSINESS, MODULE, FILE, ERROR_CODE_MAP);
    return new Proxy({}, {
        get(t, p) {
            return t[p] || logs[p] || exps[p];
        },
    });
}
var EXCEPTION_INJECT_SYMBOL;
(function (EXCEPTION_INJECT_SYMBOL) {
    EXCEPTION_INJECT_SYMBOL["PLATFORM"] = "exception.platform";
    EXCEPTION_INJECT_SYMBOL["CHANNEL"] = "exception.channel";
    EXCEPTION_INJECT_SYMBOL["BUSINESS"] = "exception.business";
})(EXCEPTION_INJECT_SYMBOL = exports.EXCEPTION_INJECT_SYMBOL || (exports.EXCEPTION_INJECT_SYMBOL = {}));
function RegisterExceptionGeneratorDefiner(opts) {
    const defaultPlatformName = typeof opts.platform === "string"
        ? opts.platform
        : index_js_3.platformInfo.getGlobalFlag("PLATFORM") || index_js_3.platformInfo.platformName();
    const defaultChannelName = typeof opts.platform === "string"
        ? opts.platform
        : index_js_3.platformInfo.getGlobalFlag("CHANNEL") || index_js_3.platformInfo.getChannel();
    const defaultBusinessName = typeof opts.platform === "string"
        ? opts.platform
        : index_js_3.platformInfo.getGlobalFlag("BUSINESS") || index_js_3.platformInfo.getBusiness();
    return function define(moduleName, fileName, opts) {
        return MixExceptionGenerator(opts.platformName || defaultPlatformName, opts.channelName || defaultChannelName, opts.businessName || defaultBusinessName, moduleName, fileName, opts.errorCodeMap);
    };
}
exports.RegisterExceptionGeneratorDefiner = RegisterExceptionGeneratorDefiner;
let SingleCustomException = class SingleCustomException {
    constructor(moduleMap) {
        Object.defineProperty(this, "moduleMap", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: moduleMap
        });
        Object.defineProperty(this, "platformName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "channelName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "businessName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "exceptionGeneratorDefiner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: RegisterExceptionGeneratorDefiner({
                platform: this.platformName,
                channel: this.channelName,
                business: this.businessName,
            })
        });
    }
};
tslib_1.__decorate([
    (0, index_js_4.Inject)(EXCEPTION_INJECT_SYMBOL.PLATFORM, { dynamics: true, optional: true }),
    tslib_1.__metadata("design:type", String)
], SingleCustomException.prototype, "platformName", void 0);
tslib_1.__decorate([
    (0, index_js_4.Inject)(EXCEPTION_INJECT_SYMBOL.CHANNEL, { dynamics: true, optional: true }),
    tslib_1.__metadata("design:type", String)
], SingleCustomException.prototype, "channelName", void 0);
tslib_1.__decorate([
    (0, index_js_4.Inject)(EXCEPTION_INJECT_SYMBOL.BUSINESS, { dynamics: true, optional: true }),
    tslib_1.__metadata("design:type", String)
], SingleCustomException.prototype, "businessName", void 0);
SingleCustomException = tslib_1.__decorate([
    (0, index_js_4.Injectable)("#single-custom-exception", { singleton: true }),
    tslib_1.__metadata("design:paramtypes", [index_js_4.ModuleStroge])
], SingleCustomException);
exports.SingleCustomException = SingleCustomException;
const myException = (0, index_js_4.Resolve)(SingleCustomException);
function UtilExceptionGenerator(moduleName, fileName, opts) {
    return myException.exceptionGeneratorDefiner(moduleName, fileName, Object.assign({ errorCodeMap: index_js_1.CustomErrorCodeMap, businessName: "util" }, opts));
}
exports.UtilExceptionGenerator = UtilExceptionGenerator;
//#endregion
