"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseBinaryToArrayBuffer = exports.encodeLatin1ToBinary = exports.getBinaryFromArrayBuffer = exports.decodeBinaryToLatin1 = void 0;
const BINARY_DECODE_CACHE = new WeakMap();
const EMPTY_UINT8_ARRAY = new Uint8Array();
function decodeBinaryToLatin1(binary) {
    if (!binary) {
        return "";
    }
    let res = BINARY_DECODE_CACHE.get(binary);
    if (typeof res === "string") {
        return res;
    }
    res = String.fromCharCode(...binary);
    BINARY_DECODE_CACHE.set(binary, res);
    return res;
}
exports.decodeBinaryToLatin1 = decodeBinaryToLatin1;
exports.getBinaryFromArrayBuffer = decodeBinaryToLatin1;
function encodeLatin1ToBinary(value) {
    if (!value) {
        return EMPTY_UINT8_ARRAY;
    }
    const binary = new Uint8Array(value.length);
    for (let i = 0; i < binary.length; i += 1) {
        binary[i] = value.charCodeAt(i) & 0xff;
    }
    BINARY_DECODE_CACHE.set(binary, value);
    return binary;
}
exports.encodeLatin1ToBinary = encodeLatin1ToBinary;
exports.parseBinaryToArrayBuffer = encodeLatin1ToBinary;
// const a = Buffer.from("123bnmdasfä¸­æ–‡æ±‰å­—ðŸ¥§");
// console.log(a.toString("binary"), a.toString("binary") === getBinaryFromArrayBuffer(a));
// console.log(a.toString("binary") === getBinaryFromArrayBuffer(parseBinaryToArrayBuffer(getBinaryFromArrayBuffer(a))));
