export declare class EasyWeakSet<K extends object, F extends object = K> {
    transformKey: (key: K) => F;
    private readonly _afterDelete?;
    private _ws;
    constructor(entries?: ReadonlyArray<F> | null, transformKey?: (key: K) => F, _afterDelete?: ((key: F) => unknown) | undefined);
    static from<K extends object, F extends object = K>(args: {
        entries?: ReadonlyArray<F> | null;
        transformKey?: (key: K) => F;
        afterDelete?: (key: F) => unknown;
    }): EasyWeakSet<K, F>;
    tryAdd(key: K): WeakSet<F>;
    tryDelete(key: K): boolean;
    tryHas(key: K): boolean;
    get delete(): (key: F) => boolean;
    get add(): (value: F) => WeakSet<F>;
    get has(): (value: F) => boolean;
    get [Symbol.toStringTag](): string;
}
