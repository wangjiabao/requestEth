export declare class EasySet<K, F = K> {
    transformKey: (key: K) => F;
    private readonly _afterDelete?;
    private _set;
    constructor(entries?: Iterable<F> | null, transformKey?: (key: K) => F, _afterDelete?: ((key: F) => unknown) | undefined);
    static from<K, F = K>(args: {
        entries?: Iterable<F> | null;
        transformKey?: (key: K) => F;
        afterDelete?: (key: F) => unknown;
    }): EasySet<K, F>;
    tryAdd(key: K): Set<F>;
    tryDelete(key: K): boolean;
    tryHas(key: K): boolean;
    get clear(): () => void;
    get delete(): (key: F) => boolean;
    get forEach(): (callbackfn: (value: F, value2: F, set: Set<F>) => void, thisArg?: any) => void;
    get has(): (value: F) => boolean;
    get add(): (value: F) => Set<F>;
    get size(): number;
    /** Returns an iterable of entries in the set. */
    get [Symbol.iterator](): () => IterableIterator<F>;
    /**
     * Returns an iterable of key, value pairs for every entry in the set.
     */
    get entries(): () => IterableIterator<[F, F]>;
    /**
     * Returns an iterable of keys in the set
     */
    get keys(): () => IterableIterator<F>;
    /**
     * Returns an iterable of values in the set
     */
    get values(): () => IterableIterator<F>;
    get [Symbol.toStringTag](): string;
}
