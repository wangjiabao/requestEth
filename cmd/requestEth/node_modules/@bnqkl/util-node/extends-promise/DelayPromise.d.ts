/**
 * 在调用.then或者.catch的时候才会执行启动函数
 */
declare const THEN_SYMBOL: unique symbol;
declare const CATCH_SYMBOL: unique symbol;
export declare class DelayPromise<T> {
    static THEN_SYMBOL: symbol;
    static CATCH_SYMBOL: symbol;
    promise: Promise<T> & {
        [THEN_SYMBOL]: Promise<T>["then"];
        [CATCH_SYMBOL]: Promise<T>["catch"];
    };
    constructor(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void);
    delayThen<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    delayCatch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    get then(): <TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
    get catch(): <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<T | TResult>;
}
export {};
