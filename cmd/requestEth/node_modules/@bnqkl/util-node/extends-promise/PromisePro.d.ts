import { $MutArgEventHandler } from "../event-base/$types.js";
import { EventEmitter } from "../event/index.js";
import { PromiseOut } from "../extends-promise-out/index.js";
import { PromiseAbortError } from "./PromiseAbortError.js";
/**
 * PromiseOut的加强版
 * 提供了中断、跟随
 *
 */
export declare class PromisePro<T> extends PromiseOut<T> {
    constructor();
    get is_done(): boolean;
    abort_error?: PromiseAbortError;
    abort(abort_message?: string): void;
    private _hasAbortEvent?;
    get _abortEvent(): EventEmitter<{
        abort: [PromiseAbortError, PromisePro<T>];
    }, never, {
        abort: [PromiseAbortError, PromisePro<T>];
    }>;
    onAbort(cb: $MutArgEventHandler<[PromiseAbortError, PromisePro<T>]>): void;
    follow(from_promise: Promise<T>): Promise<T>;
    static fromPromise<T>(promise: Promise<T>): PromisePro<T>;
    finally(cb?: () => void): Promise<T>;
}
