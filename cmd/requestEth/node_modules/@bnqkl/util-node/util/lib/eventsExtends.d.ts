import { $MutArgEventHandler, $EventOptions, $MutArg } from "../../event-base/$types.js";
import { $EventEmitter, $EventMap } from "../../event-map_emitter/$types.js";
import { EasyMap } from "../../extends-map/index.js";
export declare class EventsMap<K, V> extends EasyMap<K, V[]> {
    constructor(entries?: ReadonlyArray<readonly [K, V[]]> | null);
    add(key: K, hanlder: V): void;
    remove(key: K, hanlder: V): boolean;
}
export declare function EventMapIsolation<E extends $EventEmitter>(eventEmitter: E): E;
/**
 * 事件绑定隔离器
 * 在使用事件清除的时候（`off`,`clear`），能之清理有经过隔离器来进行绑定的事件
 */
export declare class EventCleanerIsolation<T extends $EventMap> implements $EventEmitter<T> {
    private eventEmitter;
    constructor(eventEmitter: $EventEmitter<T>);
    readonly BINDED_EVENTS_MAP: EventsMap<keyof T, $MutArgEventHandler<any>>;
    on<K extends keyof T>(eventname: K, handler: $MutArgEventHandler<T[K]>, opts?: $EventOptions): this;
    off<K extends keyof T>(eventname: K, handler: $MutArgEventHandler<T[K]>): this;
    emit<K extends keyof T>(eventname: K, ...data: $MutArg<T[K]>): this;
    once<K extends keyof T>(eventname: K, handler: $MutArgEventHandler<T[K]>, opts?: $EventOptions): this;
    removeAllListeners(): this;
    get clear(): () => this;
    get addListener(): <K extends keyof T>(eventname: K, handler: $MutArgEventHandler<T[K]>, opts?: $EventOptions | undefined) => this;
    get removeListener(): <K extends keyof T>(eventname: K, handler: $MutArgEventHandler<T[K]>) => this;
    /**导出类型 */
    TYPE: T;
}
/**
 * 事件隔离绑定器
 * 针对`EventTarget`类型
 */
export declare class EventTargetCleanerIsolation<ET extends EventTarget> implements EventTarget {
    private eventTarget;
    constructor(eventTarget: ET);
    readonly BINDED_EVENTS_MAP: EventsMap<string, EventListenerOrEventListenerObject>;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;
    dispatchEvent(event: Event): boolean;
    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
    clearAll(): this;
}
