import { $PromiseType } from "../typings/$types.js";
import { $AborterWrapper } from "./$types.js";
declare class FreeAborter implements $AborterWrapper {
    wrapAsync<R>(task: R): Promise<$PromiseType<R>>;
    wrapAsyncRunner<ARGS extends any[], R>(task: (...args: ARGS) => R): (...args: ARGS) => Promise<$PromiseType<R>>;
    wrapAsyncIterator<I>(aIterator: AsyncIterableIterator<I>): AsyncGenerator<I, void, unknown>;
    wrapAsyncIteratorReturn<R>(aIterator: AsyncGenerator<unknown, R, unknown>): Promise<R>;
}
/** 零成本的 aborter wrapper
 * 一般用于需要aborter环境的默认参数
 * ```ts
 * function foo(aborter = freeAborter) {
 *      await aborter.wrapAsync(bar())
 * }
 * ```
 */
export declare const freeAborter: FreeAborter;
export {};
