import { PromiseOut } from "../extends-promise-out/index.js";
import { $Aborter } from "./$types.js";
/**中断器 */
export declare class Aborter<REASON = unknown> implements $Aborter<REASON> {
    private _labels;
    hasLabel(label: $Aborter.Label): boolean;
    private wait;
    private _waitTaskAborterWM;
    wrapAsync<R>(task: R, label?: $Aborter.Label, stackIndex?: number | {
        aborter: PromiseOut<never>;
        runtimErrorStack: string;
    }): Promise<Awaited<Awaited<R>>>;
    wrapAsyncRunner<ARGS extends any[], R>(task: (...args: ARGS) => R, label?: symbol): (...args: ARGS) => Promise<Awaited<Awaited<R>>>;
    wrapAsyncIterator<I>(aIterator: AsyncIterator<I>): AsyncGenerator<Awaited<I>, void, unknown>;
    wrapAsyncIteratorReturn<R>(aIterator: AsyncIterator<unknown, R, unknown>): Promise<R>;
    /**
     * 是否已经中断
     */
    get isAborted(): boolean;
    private _isAborted;
    /**
     * 中断的原因是什么
     */
    get abortReason(): REASON | undefined;
    private _abortReason?;
    /**
     * 这个promise不会抛出异常
     */
    get afterAborted(): Promise<REASON | undefined>;
    private _afterAborted_po?;
    private get _afterAborted();
    /**
     * 这个promise会抛出异常
     */
    get abortedPromise(): Promise<never>;
    private _abortedPromise_po?;
    private get _abortedPromise();
    /**
     * @param reason
     */
    abort(reason?: REASON): void;
}
