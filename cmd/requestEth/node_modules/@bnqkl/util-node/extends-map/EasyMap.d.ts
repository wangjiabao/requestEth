export declare class EasyMap<K, V, F = K> extends Map<F, V> {
    creater: (key: K, formatedKey: F) => V;
    transformKey: (key: K) => F;
    private readonly _afterDelete?;
    constructor(creater: (key: K, formatedKey: F) => V, entries?: ReadonlyArray<readonly [F, V]> | null, transformKey?: (key: K) => F, _afterDelete?: ((key: F) => unknown) | undefined);
    static from<K, V, F = K>(args: {
        creater: (key: K, formatedKey: F) => V;
        entries?: ReadonlyArray<readonly [F, V]> | null;
        transformKey?: (key: K) => F;
        afterDelete?: (key: F) => unknown;
    }): EasyMap<K, V, F>;
    forceGet(key: K, creater?: (key: K, formatedKey: F) => V): V;
    tryGet(key: K): V | undefined;
    trySet(key: K, val: V): this;
    tryDelete(key: K): boolean;
    tryHas(key: K): boolean;
    delete(key: F): boolean;
    get [Symbol.toStringTag](): string;
    static call(_this: any, creater: any, entries: any, transformKey: any, _afterDelete: any): EasyMap<any, any, any>;
}
