export declare class EasyWeakMap<K extends object, V, F extends object = K> extends WeakMap<F, V> {
    creater: (key: K, formatedKey: F) => V;
    transformKey: (key: K) => F;
    private readonly _afterDelete?;
    constructor(creater: (key: K, formatedKey: F) => V, entries?: ReadonlyArray<[F, V]> | null, transformKey?: (key: K) => F, _afterDelete?: ((key: F) => unknown) | undefined);
    static from<K extends object, V, F extends object = K>(args: {
        creater: (key: K, formatedKey: F) => V;
        entries?: ReadonlyArray<[F, V]> | null;
        transformKey?: (key: K) => F;
        afterDelete?: (key: F) => unknown;
    }): EasyWeakMap<K, V, F>;
    forceGet(key: K, creater?: (key: K, formatedKey: F) => V): V;
    tryGet(key: K): V | undefined;
    trySet(key: K, val: V): this;
    tryDelete(key: K): boolean;
    tryHas(key: K): boolean;
    delete(key: F): boolean;
    get [Symbol.toStringTag](): string;
    static call(_this: any, creater: any, entries: any, transformKey: any, _afterDelete: any): EasyWeakMap<any, any, any>;
}
