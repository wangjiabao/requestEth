"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeypairHelper = void 0;
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./sign"), exports);
tslib_1.__exportStar(require("./box"), exports);
tslib_1.__exportStar(require("./core"), exports);
tslib_1.__exportStar(require("./hash"), exports);
tslib_1.__exportStar(require("./curve25519"), exports);
const sign_1 = require("./sign");
const box_1 = require("./box");
class KeypairHelper {
    constructor(buffer) {
        this.__buffer = buffer;
    }
    create(secretHash) {
        const keypair = (0, sign_1.sign_keyPair_fromSeed)(secretHash);
        return {
            secretKey: this.__buffer.from(keypair.secretKey),
            publicKey: this.__buffer.from(keypair.publicKey),
        };
    }
    createBySecretKey(secretKey) {
        const keypair = (0, sign_1.sign_keyPair_fromSecretKey)(secretKey);
        return {
            secretKey: this.__buffer.from(keypair.secretKey),
            publicKey: this.__buffer.from(keypair.publicKey),
        };
    }
    detached_sign(hash, secretKey) {
        return this.__buffer.from((0, sign_1.sign_detached)(hash, secretKey));
    }
    detached_verify(hash, signatureBuffer, publicKey) {
        return (0, sign_1.sign_detached_verify)(hash, signatureBuffer, publicKey);
    }
    box(msg, publicKey, secretKey, nonce = new Uint8Array(24 /* BoxLength.Nonce */)) {
        const encryptedMessage = (0, box_1.box)(msg, nonce, publicKey, secretKey);
        return { encryptedMessage, nonce };
    }
    open(msg, nonce, publicKey, secretKey) {
        return (0, box_1.box_open)(msg, nonce, publicKey, secretKey) || false;
    }
}
exports.KeypairHelper = KeypairHelper;
//# sourceMappingURL=index.js.map