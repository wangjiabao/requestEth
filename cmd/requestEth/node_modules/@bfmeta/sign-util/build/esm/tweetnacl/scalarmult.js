"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._scalarMult_base = exports._scalarMult = exports.scalarMult_base = exports.scalarMult = void 0;
const array_1 = require("./array");
const core_1 = require("./core");
const curve25519_1 = require("./curve25519");
const check_1 = require("./check");
function scalarMult(n, p) {
    (0, check_1.checkArrayTypes)(n, p);
    if (n.length !== 32 /* ScalarLength.Scalar */)
        throw new Error("bad n size");
    if (p.length !== 32 /* ScalarLength.GroupElement */)
        throw new Error("bad p size");
    const q = new array_1.ByteArray(32 /* ScalarLength.GroupElement */);
    _scalarMult(q, n, p);
    return q;
}
exports.scalarMult = scalarMult;
function scalarMult_base(n) {
    (0, check_1.checkArrayTypes)(n);
    if (n.length !== 32 /* ScalarLength.Scalar */)
        throw new Error("bad n size");
    const q = new array_1.ByteArray(32 /* ScalarLength.GroupElement */);
    _scalarMult_base(q, n);
    return q;
}
exports.scalarMult_base = scalarMult_base;
// low level
function _scalarMult(q, n, p) {
    const z = new array_1.ByteArray(32);
    const x = new array_1.NumArray(80);
    const a = (0, core_1.gf)();
    const b = (0, core_1.gf)();
    const c = (0, core_1.gf)();
    const d = (0, core_1.gf)();
    const e = (0, core_1.gf)();
    const f = (0, core_1.gf)();
    let r, i;
    for (i = 0; i < 31; i++)
        z[i] = n[i];
    z[31] = (n[31] & 127) | 64;
    z[0] &= 248;
    (0, curve25519_1.unpack25519)(x, p);
    for (i = 0; i < 16; i++) {
        b[i] = x[i];
        d[i] = a[i] = c[i] = 0;
    }
    a[0] = d[0] = 1;
    for (i = 254; i >= 0; --i) {
        r = (z[i >>> 3] >>> (i & 7)) & 1;
        (0, curve25519_1.sel25519)(a, b, r);
        (0, curve25519_1.sel25519)(c, d, r);
        (0, core_1.addition)(e, a, c);
        (0, core_1.subtraction)(a, a, c);
        (0, core_1.addition)(c, b, d);
        (0, core_1.subtraction)(b, b, d);
        (0, core_1.squaring)(d, e);
        (0, core_1.squaring)(f, a);
        (0, core_1.multiplication)(a, c, a);
        (0, core_1.multiplication)(c, b, e);
        (0, core_1.addition)(e, a, c);
        (0, core_1.subtraction)(a, a, c);
        (0, core_1.squaring)(b, a);
        (0, core_1.subtraction)(c, d, f);
        (0, core_1.multiplication)(a, c, core_1._121665);
        (0, core_1.addition)(a, a, d);
        (0, core_1.multiplication)(c, c, a);
        (0, core_1.multiplication)(a, d, f);
        (0, core_1.multiplication)(d, b, x);
        (0, core_1.squaring)(b, e);
        (0, curve25519_1.sel25519)(a, b, r);
        (0, curve25519_1.sel25519)(c, d, r);
    }
    for (i = 0; i < 16; i++) {
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
    }
    const x32 = x.subarray(32);
    const x16 = x.subarray(16);
    (0, curve25519_1.inv25519)(x32, x32);
    (0, core_1.multiplication)(x16, x16, x32);
    (0, curve25519_1.pack25519)(q, x16);
    return 0;
}
exports._scalarMult = _scalarMult;
function _scalarMult_base(q, n) {
    return _scalarMult(q, n, core_1._9);
}
exports._scalarMult_base = _scalarMult_base;
//# sourceMappingURL=scalarmult.js.map