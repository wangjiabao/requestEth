"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.box_keyPair_fromSecretKey = exports.box_keyPair = exports.box_open_after = exports.box_open = exports.box_after = exports.box_before = exports.box = void 0;
const array_1 = require("./array");
const core_1 = require("./core");
const random_1 = require("./random");
const salsa20_1 = require("./salsa20");
const scalarmult_1 = require("./scalarmult");
const secretbox_1 = require("./secretbox");
const check_1 = require("./check");
function box(msg, nonce, publicKey, secretKey) {
    const k = box_before(publicKey, secretKey);
    return (0, secretbox_1.secretbox)(msg, nonce, k);
}
exports.box = box;
function box_before(publicKey, secretKey) {
    (0, check_1.checkArrayTypes)(publicKey, secretKey);
    (0, check_1.checkBoxLengths)(publicKey, secretKey);
    const k = new array_1.ByteArray(32 /* BoxLength.SharedKey */);
    _box_beforenm(k, publicKey, secretKey);
    return k;
}
exports.box_before = box_before;
exports.box_after = secretbox_1.secretbox;
function box_open(msg, nonce, publicKey, secretKey) {
    const k = box_before(publicKey, secretKey);
    return (0, secretbox_1.secretbox_open)(msg, nonce, k);
}
exports.box_open = box_open;
exports.box_open_after = secretbox_1.secretbox_open;
function box_keyPair() {
    const pk = new array_1.ByteArray(32 /* BoxLength.PublicKey */);
    const sk = new array_1.ByteArray(32 /* BoxLength.SecretKey */);
    _box_keypair(pk, sk);
    return { publicKey: pk, secretKey: sk };
}
exports.box_keyPair = box_keyPair;
function box_keyPair_fromSecretKey(secretKey) {
    (0, check_1.checkArrayTypes)(secretKey);
    if (secretKey.length !== 32 /* BoxLength.SecretKey */)
        throw new Error("bad secret key size");
    const pk = new array_1.ByteArray(32 /* BoxLength.PublicKey */);
    (0, scalarmult_1._scalarMult_base)(pk, secretKey);
    return { publicKey: pk, secretKey: new array_1.ByteArray(secretKey) };
}
exports.box_keyPair_fromSecretKey = box_keyPair_fromSecretKey;
// low level
function _box_keypair(y, x) {
    (0, random_1._randomBytes)(x, 32);
    return (0, scalarmult_1._scalarMult_base)(y, x);
}
function _box_beforenm(k, y, x) {
    const s = new array_1.ByteArray(32);
    (0, scalarmult_1._scalarMult)(s, x, y);
    return (0, salsa20_1._hsalsa20)(k, core_1._0, s, salsa20_1._sigma);
}
//# sourceMappingURL=box.js.map