"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSecretKey = exports.convertPublicKey = void 0;
const tweetnacl_1 = require("../tweetnacl");
/**
 * Converts Ed25519 public key to Curve25519 public key.
 *
 * montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
 */
function convertPublicKey(pk) {
    let z = new Uint8Array(32), q = [(0, tweetnacl_1.gf)(), (0, tweetnacl_1.gf)(), (0, tweetnacl_1.gf)(), (0, tweetnacl_1.gf)()], a = (0, tweetnacl_1.gf)(), b = (0, tweetnacl_1.gf)();
    if ((0, tweetnacl_1.unpackneg)(q, pk)) {
        throw new TypeError("invalid public key");
    }
    let y = q[1];
    (0, tweetnacl_1.addition)(a, tweetnacl_1.gf1, y);
    (0, tweetnacl_1.subtraction)(b, tweetnacl_1.gf1, y);
    (0, tweetnacl_1.inv25519)(b, b);
    (0, tweetnacl_1.multiplication)(a, a, b);
    (0, tweetnacl_1.pack25519)(z, a);
    return z;
}
exports.convertPublicKey = convertPublicKey;
/**
 * Converts Ed25519 secret key to Curve25519 secret key.
 *
 */
function convertSecretKey(sk) {
    let d = new Uint8Array(64), o = new Uint8Array(32), i;
    (0, tweetnacl_1._hash)(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    for (i = 0; i < 32; i++)
        o[i] = d[i];
    for (i = 0; i < 64; i++)
        d[i] = 0;
    return o;
}
exports.convertSecretKey = convertSecretKey;
//# sourceMappingURL=ed2curve.js.map