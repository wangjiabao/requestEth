"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.platformInfo = exports.isWebWorker = exports.isWebMainThread = exports.isIOS = exports.isAndroid = exports.isWebView = exports.isCordova = void 0;
const diff_1 = require("./diff");
const checkType = (name, type) => {
    try {
        return new Function(`return typeof ${name} === "${type}"`)();
    }
    catch (_) {
        return false;
    }
};
exports.isCordova = checkType("cordova", "object");
/**web worker and main thread all has location as navigator */
exports.isWebView = checkType("navigator", "object");
exports.isAndroid = exports.isWebView && /Android/i.test(navigator.userAgent);
exports.isIOS = exports.isWebView && /iPhone|iPod|iPad/i.test(navigator.userAgent);
exports.isWebMainThread = exports.isWebView && checkType("document", "object");
exports.isWebWorker = exports.isWebView && !exports.isWebMainThread;
exports.platformInfo = {
    getGlobalFlag(flag_name, defaultValue = "") {
        const g = this.global();
        return (g[flag_name] ||
            (g.process && g.process.env && g.process.env[flag_name]) ||
            (g.location && g.location.href && new URL(g.location.href).searchParams.get(flag_name)) ||
            (g.localStorage && g.localStorage.getItem(flag_name)) ||
            defaultValue);
    },
    global() {
        const globalThisGetter = () => {
            if (typeof globalThis === "object") {
                return globalThis;
                // Object.defineProperty(Object.prototype, "__globalThis_magic__", {
                //   get: function() {
                //     return this;
                //   },
                //   configurable: true,
                // });
                // //@ts-ignore
                // __globalThis_magic__.globalThis = __globalThis_magic__;
                // //@ts-ignore
                // delete Object.prototype.__globalThis_magic__;
            }
            if (typeof self === "object") {
                return (self.globalThis = self);
            }
            if (typeof global === "object") {
                return (global.globalThis = global);
            }
            return Function("return this")();
        };
        const g = globalThisGetter();
        this.global = () => g;
        return g;
    },
    platformName() {
        if (diff_1.isNodejs) {
            return "Nodejs";
        }
        const device_name = exports.isAndroid ? "Android" : exports.isIOS ? "IOS" : "unknown";
        if (exports.isCordova) {
            return "Cordova-" + device_name;
        }
        if (exports.isWebMainThread) {
            return "WebMaster-" + device_name;
        }
        if (exports.isWebWorker) {
            return "WebWorker-" + device_name;
        }
        return "UNKNOWN";
    },
    getChannel() {
        return "UNKNOWN";
    },
    getBusiness() {
        return "UNKNOWN";
    },
};
//# sourceMappingURL=common.js.map