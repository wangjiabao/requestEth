"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpHelper = void 0;
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const util_node_1 = require("@bnqkl/util-node");
let HttpHelper = class HttpHelper {
    constructor() { }
    checkHttp(url) {
        if (url.toLocaleLowerCase().startsWith("https")) {
            return https;
        }
        else {
            return http;
        }
    }
    sendPostRequest(url, argv) {
        return new Promise((resolve, reject) => {
            let timeoutId = setTimeout(() => {
                reject(new Error(`request timeout ${url}`));
            }, 10 * 1000);
            const req = this.checkHttp(url).request(url, {
                method: "POST",
                headers: {
                    "content-type": "application/json",
                },
            }, async (res) => {
                clearTimeout(timeoutId);
                parsePostRequestParameter(res, resolve, reject);
            });
            req.on("error", (e) => {
                clearTimeout(timeoutId);
                return reject(e);
            });
            req.write(JSON.stringify(argv));
            req.end();
        });
    }
    sendGetRequest(url, argv) {
        const completeUrl = url +
            (argv
                ? url.includes("?")
                    ? `&${parseGetRequestParamter(argv)}`
                    : `?${parseGetRequestParamter(argv)}`
                : "");
        return new Promise((resolve, reject) => {
            let timeoutId = setTimeout(() => {
                reject(new Error(`request timeout ${url}`));
            }, 10 * 1000);
            const req = this.checkHttp(url).get(completeUrl, async (res) => {
                clearTimeout(timeoutId);
                parsePostRequestParameter(res, resolve, reject);
            });
            req.on("error", (e) => {
                clearTimeout(timeoutId);
                return reject(e);
            });
        });
    }
    sendApiGetRequest(url, argv, headers) {
        const completeUrl = url + (argv ? `?${parseGetRequestParamter(argv)}` : "");
        return new Promise((resolve, reject) => {
            let timeoutId = setTimeout(() => {
                reject(new Error(`request timeout ${url}`));
            }, 10 * 1000);
            const req = this.checkHttp(url).get(completeUrl, { headers }, async (res) => {
                parsePostRequestParameter(res, resolve, reject);
            });
            req.on("error", (e) => {
                clearTimeout(timeoutId);
                return reject(e);
            });
        });
    }
};
HttpHelper = __decorate([
    (0, util_node_1.Injectable)(),
    __metadata("design:paramtypes", [])
], HttpHelper);
exports.HttpHelper = HttpHelper;
function parseGetRequestParamter(argv) {
    let param = "";
    if (argv) {
        for (const k in argv) {
            if (argv[k] === undefined)
                continue;
            param = (param ? param + "&" : param) + `${k}=${argv[k]}`;
        }
    }
    return param;
}
function parsePostRequestParameter(imcomingMessage, resolve, reject) {
    const buffers = [];
    imcomingMessage.on("error", (error) => {
        return reject(error.message);
    });
    imcomingMessage.on("data", (chunk) => buffers.push(chunk));
    imcomingMessage.on("end", () => {
        const requestString = Buffer.concat(buffers).toString();
        try {
            return resolve(JSON.parse(requestString));
        }
        catch (e) {
            return reject(`parse parameter error`);
        }
    });
}
