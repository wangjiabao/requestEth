"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._BaseApi = exports.BFCHAIN_PEERS = void 0;
const util_node_1 = require("@bnqkl/util-node");
const httpHelper_1 = require("./httpHelper");
// import type { BFMetaSDK } from "@bfmeta/node-sdk";
exports.BFCHAIN_PEERS = {
    ips: Symbol("ips"),
    port: Symbol("port"),
    browser: Symbol("browser"),
};
let _BaseApi = class _BaseApi {
    httpHelper;
    // private __sdk!: BFMetaSDK;
    browser;
    constructor(httpHelper) {
        this.httpHelper = httpHelper;
    }
    async getTransactionsByBrowser(params) {
        const result = await this.httpHelper.sendPostRequest(`${this.getBrowserUrl()}/public/queryTransaction`, params);
        if (result.success) {
            return { success: true, result: result.data };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `queryTransaction error`);
        }
    }
    async getAddressBalance(address, magic, assetType) {
        const result = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/public/accountBalance`, {
            address,
            magic,
            assetType,
        });
        if (result.success) {
            return { success: true, result: { amount: result.data } };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `${this.browser} getAddressBalance error`);
        }
    }
    async getAccountInfo(address) {
        const result = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/public/accountsInfo`, {
            address,
        });
        if (result.success) {
            if (result.data) {
                const { address, publicKey, secondPublicKey, isDelegate, isAcceptVote, accountStatus, equityInfo } = result.data;
                return {
                    success: true,
                    result: {
                        address,
                        publicKey,
                        secondPublicKey,
                        isDelegate,
                        isAcceptVote,
                        accountStatus,
                        equityInfo,
                    },
                };
            }
            else {
                return {
                    success: true,
                    result: null,
                };
            }
        }
        else {
            throw new Error(result.error?.message ?? `${this.browser} getAccountInfo error`);
        }
    }
    async getBlockAverageFee() {
        const result = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/public/blockAverageFee`, {});
        if (result.success) {
            return { success: true, result: { blockAveFee: result.data } };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `${this.browser} getBlockAverageFee error`);
        }
    }
    async getAccountAsset(address) {
        const result = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/public/addressAccountsAssets`, { address });
        if (result.success) {
            return { success: true, result: result.data };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `${this.browser} addressAccountsAssets error`);
        }
    }
    async getAssets(page, pageSize, assetType) {
        const result = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/assets/queryAssets`, {
            page,
            pageSize,
            assetType,
        });
        if (result.success) {
            return { success: true, result: result.data };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `${this.browser} getAssets error`);
        }
    }
    async getAssetDetails(assetType) {
        const getAssetsRet = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/assets`, {
            page: 1,
            pageSize: 1,
            assetType,
        });
        if (!getAssetsRet.success) {
            throw new Error(getAssetsRet.error?.message ? getAssetsRet.error.message : `${this.browser} /assets error`);
        }
        const getAssetsData = getAssetsRet.data.dataList[0];
        if (!getAssetsData) {
            throw new Error(`can't find assetInfo of assetType:${assetType}`);
        }
        const detailRet = await this.httpHelper.sendGetRequest(`${this.getBrowserUrl()}/assets/queryAssetDetails`, {
            assetType,
        });
        if (!detailRet.success) {
            throw new Error(detailRet.error?.message ? detailRet.error.message : `${this.browser} /assets/queryAssetDetails error`);
        }
        return { success: true, result: { ...detailRet.data, addressQty: getAssetsData.addressQty } };
    }
    async getAllAccountAsset(opt) {
        const result = await this.httpHelper.sendPostRequest(`${this.getBrowserUrl()}/asset/allAccounts`, opt);
        if (result.success) {
            return { success: true, result: result.data };
        }
        else {
            throw new Error(result.error?.message ? result.error.message : `${this.browser} addressAccountsAssets error`);
        }
    }
};
_BaseApi = __decorate([
    (0, util_node_1.Injectable)(),
    __metadata("design:paramtypes", [httpHelper_1.HttpHelper])
], _BaseApi);
exports._BaseApi = _BaseApi;
