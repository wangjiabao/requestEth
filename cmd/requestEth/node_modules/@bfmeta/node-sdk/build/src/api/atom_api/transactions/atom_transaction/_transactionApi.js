"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionApi = void 0;
require("../../../../constants");
class TransactionApi {
    networkHelper;
    __API_NAMESPACE = "api/transaction";
    constructor(networkHelper) {
        this.networkHelper = networkHelper;
    }
    getApiPath(suffix) {
        let apiPath = `${this.networkHelper.URL_PREFIX}${this.networkHelper.REQUEST_PROTOCOL === "websocket" ? "post" + "/" : ""}${this.__API_NAMESPACE}`;
        if (suffix) {
            apiPath += `/${suffix}`;
        }
        return apiPath;
    }
    async createTransaction(argv) {
        const apiPath = this.getApiPath(this.CREATE_API_PATH);
        try {
            const result = await this.networkHelper.sendPostRequest(apiPath, argv);
            return result;
        }
        catch (e) {
            const errorInfo = {
                success: false,
                error: {
                    code: "7001",
                    message: `request api ${apiPath} error`,
                    description: e.message,
                },
            };
            return errorInfo;
        }
    }
    async packageTransaction(argv) {
        const apiPath = this.getApiPath(this.PACKAGE_API_PATH);
        try {
            const result = await this.networkHelper.sendPostRequest(apiPath, argv);
            return result;
        }
        catch (e) {
            const errorInfo = {
                success: false,
                error: {
                    code: "7001",
                    message: `request api ${apiPath} error`,
                    description: e.message,
                },
            };
            return errorInfo;
        }
    }
    async broadcastTransaction(argv) {
        const apiPath = this.getApiPath(this.BROADCAST_API_PATH);
        try {
            const result = await this.networkHelper.sendPostRequest(apiPath, argv);
            return result;
        }
        catch (e) {
            const errorInfo = {
                success: false,
                error: {
                    code: "7001",
                    message: `request api ${apiPath} error`,
                    description: e.message,
                },
            };
            return errorInfo;
        }
    }
}
exports.TransactionApi = TransactionApi;
