"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const network_1 = require("./network");
require("../constants");
const atom_api_1 = require("./atom_api");
const helpers_1 = require("../helpers");
class Api {
    fetch;
    __configHelper;
    __basicApi;
    __systemApi;
    __transactionApi;
    __upgradeApi;
    __httpHelper;
    get httpHelper() {
        if (this.__httpHelper) {
            return this.__httpHelper;
        }
        else {
            throw new Error(`httphelper is not init`);
        }
    }
    __websocketHelper;
    get websocketHelper() {
        if (this.__websocketHelper) {
            return this.__websocketHelper;
        }
        else {
            throw new Error(`websocketHelper is not init`);
        }
    }
    constructor(configOptions, fetch) {
        this.fetch = fetch;
        this.__configHelper = new helpers_1.ApiConfigHelper(configOptions);
        const apiConfig = this.__configHelper.apiConfig;
        let networkHelper;
        if (apiConfig.requestProtocol == "http") {
            if (!fetch) {
                throw new Error(`fetch class is not impl`);
            }
            this.__httpHelper = new network_1.HttpHelper(this.__configHelper, fetch);
            networkHelper = this.__httpHelper;
        }
        else {
            this.__websocketHelper = new network_1.WebsocketHelper(this.__configHelper);
            networkHelper = this.websocketHelper;
            this.__upgradeApi = new atom_api_1.UpgradeApi(networkHelper);
        }
        this.__basicApi = new atom_api_1.BasicApi(networkHelper);
        this.__systemApi = new atom_api_1.SystemApi(networkHelper);
        this.__transactionApi = new atom_api_1.TransactionApi(networkHelper);
    }
    get config() {
        return this.__configHelper.apiConfig;
    }
    get basic() {
        return this.__basicApi;
    }
    get system() {
        return this.__systemApi;
    }
    get transaction() {
        return this.__transactionApi;
    }
    get upgrade() {
        return this.__upgradeApi;
    }
    setApiconfig(configOptions) {
        return this.__configHelper.setApiConfig(configOptions);
    }
}
exports.Api = Api;
