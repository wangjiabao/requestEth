export {};
declare global {
    export namespace BFMetaNodeSDK {
        namespace Basic {
            interface TransactionJSON extends BFMetaNodeSDK.TransactionJSON {
            }
            interface TransactionStorageJSON extends BFMetaNodeSDK.TransactionStorageJSON {
            }
            interface SomeTransactionJSON<T extends TransactionJSON> {
                transaction: T;
            }
            type AssetPrealnumJSON = {
                remainAssetPrealnum: string;
                frozenMainAssetPrealnum: string;
            };
            interface TransactionInBlockJSON<T extends TransactionJSON = TransactionJSON> extends SomeTransactionJSON<T> {
                tIndex: number;
                height: number;
                transactionAssetChanges: TransactionAssetChangeJSON[];
                assetPrealnum?: AssetPrealnumJSON;
                signature: string;
                signSignature?: string;
            }
            interface TransactionAssetChangeJSON {
                accountType: number;
                sourceChainMagic: string;
                assetType: string;
                assetPrealnum: string;
            }
            interface RoundOfflineGeneratersHashMap {
                [roundOffset: string]: string;
            }
            interface BlockWithoutTransactionJSON<AssetJSON extends object = object> {
                version: number;
                height: number;
                blockSize: number;
                timestamp: number;
                signature: string;
                signSignature?: string;
                generatorPublicKey: string;
                generatorSecondPublicKey?: string;
                generatorEquity: string;
                previousBlockSignature: string;
                reward: string;
                magic: string;
                blockParticipation: string;
                remark: {
                    [key: string]: string;
                };
                asset: AssetJSON;
                roundOfflineGeneratersHashMap: RoundOfflineGeneratersHashMap;
            }
            interface CountAndAmountStatisticJSON {
                changeAmount: string;
                changeCount: number;
                moveAmount: string;
                transactionCount: number;
            }
            interface AssetStatisticJSON {
                typeStatisticHashMap: {
                    [baseType: string]: CountAndAmountStatisticJSON;
                };
                total: CountAndAmountStatisticJSON;
            }
            interface AssetTypeAssetStatisticJSON {
                assetTypeTypeStatisticHashMap: {
                    [assetType: string]: AssetStatisticJSON;
                };
            }
            interface StatisticInfoJSON {
                totalFee: string;
                totalAsset: string;
                totalChainAsset: string;
                totalAccount: number;
                magicAssetTypeTypeStatisticHashMap: {
                    [magic: string]: AssetTypeAssetStatisticJSON;
                };
            }
            type BlockTransactionInfoJSON = {
                startTindex: number;
                numberOfTransactions: number;
                payloadHash: string;
                payloadLength: number;
                totalAmount: string;
                totalFee: string;
                transactionInBlocks: TransactionInBlockJSON[];
                statisticInfo: StatisticInfoJSON;
            };
            interface BlockJSON<AssetJSON extends object = object> extends BlockWithoutTransactionJSON<AssetJSON> {
                transactionInfo: BlockTransactionInfoJSON;
            }
            interface BlockchainStatusJSON<S = any> {
                status: S;
            }
            type LastBlockInfo<T = any> = {
                version: number;
                height: number;
                timestamp: number;
                blockSize: number;
                generatorPublicKey: string;
                generatorSecondPublicKey?: string;
                generatorEquity: string;
                previousBlockSignature: string;
                reward: string;
                magic: string;
                blockParticipation: string;
                signature: string;
                signSignature?: string;
                remark: {
                    [key: string]: string;
                };
                transactionInfo: BlockTransactionInfoJSON;
                asset: T;
            };
            interface BasicApiRequestParams {
            }
            interface GetBlockParams extends BasicApiRequestParams {
                signature?: string;
                height?: number;
                page?: number;
                pageSize?: number;
            }
            interface GetTransactionTypeParams extends BasicApiRequestParams {
                baseType: string;
            }
            interface GetTransactionsParams extends BasicApiRequestParams {
                signature?: string;
                height?: number;
                minHeight?: number;
                maxHeight?: number;
                senderId?: string;
                recipientId?: string;
                address?: string;
                type?: string[];
                storageValue?: string;
                page?: number;
                pageSize?: number;
                sort?: number;
            }
            interface GenerateSecretParams extends BasicApiRequestParams {
                lang: string;
            }
            interface CreateAccountParams extends BasicApiRequestParams {
                secret: string;
            }
            interface GetAccountPublicKeyParams extends BasicApiRequestParams {
                address: string;
            }
            interface GetAccountLastTransactionParams extends BasicApiRequestParams {
                address: string;
                assetType: string;
            }
            interface GetAccountLastTypeTransactionParams extends BasicApiRequestParams {
                address: string;
                transactionType: string;
            }
            interface SetKVStorageTempParams extends BasicApiRequestParams {
                datas: Uint8Array[];
            }
            interface GetKVStorageParams extends BasicApiRequestParams {
                key: string;
            }
            interface BasicApiRequestResult {
            }
            interface GetBlockResult extends BasicApiRequestResult {
                blocks: BlockJSON[];
                count: number;
                cmdLimitPerQuery: number;
            }
            type GetLastBlockResult = LastBlockInfo<any>;
            interface GetTransactionTypeResult extends BasicApiRequestResult {
                type: string;
            }
            interface GetTransactionsResult extends BasicApiRequestResult {
                trs: TransactionInBlockJSON[];
                count: number;
                cmdLimitPerQuery: number;
            }
            interface GenerateSecretResult extends BasicApiRequestResult {
                secret: string;
            }
            interface CreateAccountResult extends BasicApiRequestResult {
                address: string;
                publicKey: string;
                secretKey: string;
            }
            interface GetAccountPublicKeyResult extends BasicApiRequestResult {
                publicKey?: string;
            }
            interface GetNodeVersionResult extends BasicApiRequestResult {
                version: string;
            }
            interface GetBfchainVersionResult extends BasicApiRequestResult {
                version: string;
            }
            interface GetBlockChainStatusResult extends BasicApiRequestResult {
                status: BlockchainStatusJSON["status"];
                peers: number;
                isReady: boolean;
                serverTimestamp: number;
            }
            interface GetAccountLastTransactionResult extends BasicApiRequestResult {
                transactionInBlock?: TransactionInBlockJSON;
                assetIndex?: {
                    [assetType: string]: number;
                };
                block?: BlockJSON;
            }
            interface GetAccountLastTypeTransactionResult extends BasicApiRequestResult {
                transactionInBlock?: TransactionInBlockJSON;
            }
            interface SetKVStorageTempResult extends BasicApiRequestResult {
                keys: string[];
            }
            interface GetKVStorageResult extends BasicApiRequestResult {
                data: Uint8Array;
            }
            interface GetTransactionMinFeePerByteResult extends BasicApiRequestResult {
                minFeePerByte: BFMetaNodeSDK.Common.FractionJSON<number>;
            }
            interface BasicApiSuccessReturn<T extends BasicApiRequestResult> extends BFMetaNodeSDK.ApiSuccessReturn<T> {
                result: T;
            }
            interface BasicApiFailureReturn extends ApiFailureReturn {
            }
            type BasicApiReturn<T extends BasicApiRequestResult> = BasicApiSuccessReturn<T> | BasicApiFailureReturn;
            type BasicApi = import("./apis/_basicGetApi").BasicGetApi<any> | import("./apis/_basicPostApi").BasicPostApi<any>;
            type GetBlockApi = import("./apis").GetBlockApi;
            type GetLastBlockApi = import("./apis").GetLastBlockApi;
            type GetTransactionTypeApi = import("./apis").GetTransactionTypeApi;
            type GetTransactionsApi = import("./apis").GetTransactionsApi;
            type GetBfchainVersionApi = import("./apis").GetBfchainVersionApi;
            type GetNodeVersionApi = import("./apis").GetNodeVersionApi;
            type GetBlockChainStatusApi = import("./apis").GetBlockChainStatusApi;
            type GenerateSecretApi = import("./apis").GenerateSecretApi;
            type CreateAccountApi = import("./apis").CreateAccountApi;
            type GetAccountPublicKeyApi = import("./apis").GetAccountPublicKeyApi;
            type GetAccountLastTransactionApi = import("./apis").GetAccountLastTransactionApi;
            type GetAccountLastTypeTransactionApi = import("./apis").GetAccountLastTypeTransactionApi;
            type SetKVStorageTempApi = import("./apis").SetKVStorageTempApi;
            type GetKVStorageApi = import("./apis").GetKVStorageApi;
            type GetTransactionMinFeePerByteApi = import("./apis").GetTransactionMinFeePerByteApi;
        }
    }
}
