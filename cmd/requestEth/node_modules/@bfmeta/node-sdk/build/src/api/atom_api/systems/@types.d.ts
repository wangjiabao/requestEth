/// <reference types="node" />
export {};
declare global {
    export namespace BFMetaNodeSDK {
        namespace System {
            interface SystemApiRequestParams {
                verifyType: string;
                verifyKey: string;
            }
            interface SafetyCloseParams extends SystemApiRequestParams {
                isShutdown?: boolean;
            }
            interface SetSystemKeyParams extends SystemApiRequestParams {
                systemKeyOld: string;
                systemKeyNew: string;
                newKeyDecryptEnable?: boolean;
            }
            interface VerifySystemKeyParams extends SystemApiRequestParams {
                systemKey: string;
            }
            interface AddSystemAdminParams extends SystemApiRequestParams {
                systemKey: string;
                systemAdminAddress: string;
            }
            interface GetSystemAdminParams extends SystemApiRequestParams {
                systemKey: string;
                systemAdminAddress?: string;
            }
            interface VerifySystemAdminParams extends SystemApiRequestParams {
                cryptoAdminAddress: string;
            }
            interface DeleteSystemAdminParams extends SystemApiRequestParams {
                systemKey: string;
                systemAdminAddress: string;
            }
            interface ResetSystemAdminParams extends SystemApiRequestParams {
                systemKey: string;
                systemAdminAddresses: string[];
            }
            interface BindingAccountParams extends SystemApiRequestParams {
                systemKey: string;
                cryptoSecret: string;
                secondSecret?: string;
            }
            interface GetSystemDelegateParams extends SystemApiRequestParams {
            }
            interface MiningMachineInfoParams extends SystemApiRequestParams {
            }
            interface ConfigPort {
                turnserver: number;
                mongodb: number;
                system_websocket_port: number;
                clusterLock: number;
                grpc: number;
                update_service_port: number;
                comlink_port: number;
            }
            interface AutoVoteModel {
                enable: boolean;
                useConfigFee: boolean;
                fee: string;
                priorRecommendedNumber: boolean;
                maxNumberOfRecommended: number;
                numberOfRounds: number;
                productivityPercent: number;
                forgedBlocksPercent: number;
                applyTxPercent: number;
                votePercent: number;
                newDelegatePercent: number;
                minBeSelectProductivity: number;
            }
            interface SecretModel {
                secret: string;
                secondSecret?: string;
            }
            interface ConfigReadable extends ConfigRevisable {
                chainPort: ConfigPort;
            }
            interface ConfigRevisable {
                coreForProcess: {
                    forceUseConfig: boolean;
                    coreNumForDealTransaction: number;
                    coreNumForMemInfo: number;
                    coreNumForUntreatedTrs: number;
                };
                transactionConfig: {
                    subTrsCollection: boolean;
                    receiveVoteEnable: boolean;
                    maxTransactionLimitForVote: number;
                    transactionsLimitPerBlock: number;
                    minFeePerByte: {
                        numerator: number;
                        denominator: number;
                    };
                    maxFee: string;
                    autoVote: AutoVoteModel;
                    blob: {
                        maxTransactionBlobSize: number;
                        maxBlockBlobSize: number;
                    };
                };
                logConfig: {
                    consoleLogLevel: string;
                    fileLogLevel: string;
                    fileLogLimit: number;
                    fileLogBackup: number;
                    fileLogDateExpire: boolean;
                    fileLogDaysToKeep: number;
                };
                startConfig: {
                    generateBlockEnable: boolean;
                    remark: string;
                    useCheckPoint: boolean;
                    numberOfReservedCheckPoint: number;
                    peers: string[];
                    maxChannelNumber: number;
                    nodeLoadCount: number;
                };
                networkConfig: {
                    grpcEnable: boolean;
                };
                flowControlConfig: {
                    requestLimit: {
                        enable: boolean;
                        count: number;
                        apiRequestInterface: {
                            [apiName: string]: number;
                        };
                        time: number;
                    };
                    flowRequestLimit: {
                        enable: boolean;
                        count: number;
                        time: number;
                    };
                };
                diskMonitorConfig: {
                    enable: boolean;
                    clearPath: string[];
                    clearWhenFreeSpaceLowerThan: number;
                    checkInterval: number;
                    clearWithSuffix?: string[];
                    noClearWithSuffix?: string[];
                    noClearWithLastModifyTimeGreaterThen?: number;
                };
                noticeConfig: {
                    enable: boolean;
                    sendCondition: {
                        usageCPU: number;
                        usageDisk: number;
                        usageMemory: number;
                        missedBlocks: number;
                    };
                    sendIntervalTime: number;
                };
                serviceConfig: {
                    serverMarketEnable: boolean;
                    userMaxUploadNumber: number;
                    uploadTokenExpireTime: number;
                    remainTimeToClearUserSessoin: number;
                };
            }
            type ConfigModel = {
                forging: {
                    secrets: SecretModel[];
                };
                chainPort: ConfigPort;
                mongoDb: {
                    externalConnection: boolean;
                    user: {
                        user: string;
                        pwd: string;
                    };
                    dbPath: {
                        win32: string;
                        linux: string;
                        darwin: string;
                        freebsd: string;
                        aix: string;
                    };
                    logPath: {
                        win32: string;
                        linux: string;
                        darwin: string;
                        freebsd: string;
                        aix: string;
                    };
                    limitPerQuery: number;
                    cmdLimitPerQuery: number;
                    limitPerInsert: number;
                };
                reqCheckWhiteList: {
                    [ip: string]: boolean;
                };
                apiRequestBlackIp: boolean;
                interceptIllegalRequestEnable: boolean;
                developerSDK: {
                    eventTimeoutMS: number;
                };
                miningMachineVersionName: string;
                checkMemoryLeak: boolean;
                checkMemoryInterval: number;
            } & ConfigRevisable;
            interface SetSystemConfigParams extends SystemApiRequestParams {
                config: AllPartial<ConfigRevisable>;
            }
            interface GetSystemConfigInfoDetailParams extends SystemApiRequestParams {
            }
            interface GetRuntimeStateParams extends SystemApiRequestParams {
            }
            interface GetSystemMonitorParams extends SystemApiRequestParams {
                monitorType?: string;
                limit?: number;
                offset?: number;
            }
            interface GetSystemLoggerTypeParams extends SystemApiRequestParams {
            }
            interface GetSystemLoggerListParams extends SystemApiRequestParams {
                loggerType: string;
            }
            interface GetSystemLoggerDetailParams extends SystemApiRequestParams {
                loggerName: string;
                limit?: number;
                offset?: number;
                searchString?: string;
                readFileType?: BFMetaNodeSDK.READ_FILE_TYPE;
            }
            interface DeleteSystemLoggerParams extends SystemApiRequestParams {
                loggerName: string;
            }
            interface GetEmailAddressParams extends SystemApiRequestParams {
                emailAddress?: string;
            }
            interface EmailConfig {
                type: string;
                host?: string;
                port?: number;
                secureConnection?: boolean;
                ssl?: boolean;
                tls?: boolean;
                auth?: {
                    user: string;
                    pass: string;
                };
            }
            interface SetEmailAddressParams extends SystemApiRequestParams {
                emailToAddress: string;
                emailFromAddress: string;
                emailConfig: EmailConfig;
            }
            interface VerifySystemSecretParams extends SystemApiRequestParams {
                cryptoSecret: string;
            }
            interface SetSystemWhiteListParams extends SystemApiRequestParams {
                whiteList: string[];
            }
            interface GetSystemWhiteListParams extends SystemApiRequestParams {
            }
            interface DeleteSystemWhiteListParams extends SystemApiRequestParams {
                whiteList: string[];
            }
            interface GetProcessNetworkParams extends SystemApiRequestParams {
                limit?: number;
                offset?: number;
                processType?: string;
            }
            interface GetProcessCPUParams extends SystemApiRequestParams {
                limit?: number;
                offset?: number;
                processType?: string;
            }
            interface GetProcessMemoryParams extends SystemApiRequestParams {
                limit?: number;
                offset?: number;
                processType?: string;
            }
            interface SystemStatusParams extends SystemApiRequestParams {
            }
            interface SystemProcessParams extends SystemApiRequestParams {
            }
            interface GetAllUntreatedTrsCountParams extends SystemApiRequestParams {
            }
            interface ClearAllUntreatedTrsParams extends SystemApiRequestParams {
            }
            interface RestoreAllUntreatedTrsParams extends SystemApiRequestParams {
            }
            interface SystemApiRequestResult {
            }
            interface SafetyCloseResult extends SystemApiRequestResult {
                machineStatus: number;
            }
            interface SetSystemKeyResult extends SystemApiRequestResult {
            }
            interface VerifySystemKeyResult extends SystemApiRequestResult {
            }
            interface SystemAdminModel {
                adminAddress: string;
                adminAddTime: number;
                adminName: string;
            }
            interface AddSystemAdminResult extends SystemApiRequestResult {
                systemAdmin: SystemAdminModel;
            }
            interface GetSystemAdminResult extends SystemApiRequestResult {
                systemAdmin: SystemAdminModel[];
            }
            interface VerifySystemAdminResult extends SystemApiRequestResult {
            }
            interface DeleteSystemAdminResult extends SystemApiRequestResult {
            }
            interface ResetSystemAdminResult extends SystemApiRequestResult {
                systemAdmins: SystemAdminModel[];
            }
            interface BindingAccountResult extends SystemApiRequestResult {
                address: string;
                publicKey: string;
                delegateAddTime: number;
            }
            interface GetSystemDelegateResult extends SystemApiRequestResult {
                publicKey: string;
                address: string;
                addTime: number;
                name: string | undefined;
            }
            interface MiningMachineInfoResult extends SystemApiRequestResult {
                data: {
                    hostname: string;
                    updateServicePort: number;
                    systemInfoPort: number;
                    serviceMarketPort: number;
                    port: number;
                    platform: string;
                    cpuCount: number;
                    cpuModel: string;
                    cpuSpeed: string;
                    totalMem: number;
                    memModel: string;
                    memHz: number;
                    totalDisk: number;
                    diskModel: string;
                    delegateStatus: boolean;
                };
            }
            interface SetSystemConfigResult extends SystemApiRequestResult {
            }
            type SystemConfigInfoDetail = Pick<ConfigModel, "startConfig" | "chainPort" | "coreForProcess" | "transactionConfig" | "logConfig" | "networkConfig" | "flowControlConfig" | "noticeConfig" | "diskMonitorConfig">;
            interface GetSystemConfigInfoDetailResult extends SystemApiRequestResult, SystemConfigInfoDetail {
            }
            interface MemoryUsage {
                rss: number;
                heapTotal: number;
                heapUsed: number;
                external: number;
            }
            interface GetRuntimeStateResult extends SystemApiRequestResult {
                memory: MemoryUsage;
                platform: NodeJS.Platform;
                cpuCount: number;
                freemem: number;
                totalmen: number;
                cpuUsage: number;
                cpuUsageV2: number[];
                cpuModel: string;
                process: {
                    pid: number;
                    name?: string;
                };
            }
            interface RequestIpMonitor {
                [ip: string]: RequestIpInfoModel;
            }
            interface RequestIpInfoModel {
                requestCount: number;
                requestErrorCount: number;
                requestRejectCount: number;
                downloadFlow: number;
                uploadFlow: number;
            }
            interface RequestMethodModel {
                [method: string]: RequestTypeBaseInfo;
            }
            interface RequestPathModel {
                [path: string]: RequestTypeBaseInfo;
            }
            interface RequestApiUrlModel {
                [apiUrl: string]: RequestTypeBaseInfo;
            }
            interface RequestMethodNameModel {
                [methodName: string]: RequestTypeBaseInfo;
            }
            interface RequestTypeBaseInfo {
                count: number;
            }
            interface AccountMonitorInfo {
                [account: string]: number;
            }
            interface BlockInfo {
                height: number;
                time: number;
                reward: string;
                blockSize: number;
                numberOfTransactions: number;
            }
            interface TransactionInfo {
                amount: string;
                fee: string;
            }
            interface GetSystemMonitorResult extends SystemApiRequestResult {
                requestIpMonitorInfo?: RequestIpMonitor;
                requestMethodInfo?: RequestMethodModel;
                requestPathInfo?: RequestPathModel;
                requestApiUrlInfo?: RequestApiUrlModel;
                requestMethodNameInfo?: RequestMethodNameModel;
                requestAccountInfo?: AccountMonitorInfo;
                transaction?: TransactionInfo;
                trsCount?: {
                    [key: string]: number;
                };
                blockCount?: BlockInfo[];
            }
            interface LoggerType {
                loggerType: string;
                loggerName: string;
                loggerAmount: number;
                loggerSize: number;
                loggerUpdateTime: number;
            }
            interface GetSystemLoggerTypeResult extends SystemApiRequestResult {
                loggerType: LoggerType[];
            }
            interface LoggerInfo {
                logName: string;
                logUpdateTime: number;
                logSize: number;
                logPath: string;
            }
            interface GetSystemLoggerListResult extends SystemApiRequestResult {
                loggerList: LoggerInfo[];
            }
            interface GetSystemLoggerDetailResult extends SystemApiRequestResult {
                result: {
                    loggerDetail: string[];
                    linesTotal: number;
                };
            }
            interface DeleteSystemLoggerResult extends SystemApiRequestResult {
            }
            interface GetEmailAddressResult extends SystemApiRequestResult {
                result: {
                    emailToAddress: string;
                    emailFromAddress: string;
                    emailConfig: EmailConfig;
                };
            }
            interface SetEmailAddressResult extends SystemApiRequestResult {
            }
            interface VerifySystemSecretResult extends SystemApiRequestResult {
            }
            interface SetSystemWhiteListResult extends SystemApiRequestResult {
            }
            interface GetSystemWhiteListResult extends SystemApiRequestResult {
                whileList: string[];
            }
            interface DeleteSystemWhiteListResult extends SystemApiRequestResult {
            }
            interface ProcessNetwork {
                processType: string;
                name: string;
                send: number;
                receive: number;
                sum: number;
            }
            interface GetProcessNetworkResult extends SystemApiRequestResult {
                result?: {
                    processNetwork: ProcessNetwork[];
                    count: number;
                };
            }
            interface ProcessCPU {
                processType: string;
                name: string;
                percent: number;
                state: string;
            }
            interface GetProcessCPUResult extends SystemApiRequestResult {
                result?: {
                    processCPU: ProcessCPU[];
                    count: number;
                };
            }
            interface ProcessMemory {
                processType: string;
                name: string;
                share: number;
                rss: number;
            }
            interface GetProcessMemoryResult extends SystemApiRequestResult {
                result?: {
                    processMemory: ProcessMemory[];
                    count: number;
                };
            }
            interface DelegateInfo {
                reward: string;
                voteCount: string;
                forgerBlocks: number;
            }
            interface OsCpuInfo {
                model: string;
                speed: number;
                times: {
                    user: number;
                    nice: number;
                    sys: number;
                    idle: number;
                    irq: number;
                };
            }
            interface SystemStatusModel {
                cpusStatus: OsCpuInfo[];
                memStatus: {
                    freeMem: number;
                    totalmem: number;
                };
                bandwithStatus: {
                    total: number;
                    usage: number;
                };
                diskSpace: {
                    free: number;
                    size: number;
                };
                machineStatus: number;
                deletegateInfo: DelegateInfo;
                miningMachineVersionName: string;
                cpuUsage: number;
                currentHeight: number;
                maxHeight: number;
            }
            interface SystemStatusResult extends SystemApiRequestResult {
                systemStatus: SystemStatusModel;
            }
            interface UsageCPU {
                processCount: number;
                speed: number;
                runtime: number;
                threadCount: number;
                handleCount: number;
                CPUusage: number;
            }
            interface MemoryInfo {
                physcial: number;
                physcialUsed: number;
                physcialWait: number;
                virtual: number;
                virtualUsed: number;
                virtualWait: number;
            }
            interface NetworkInfo {
                receive: number;
                send: number;
                sum: number;
            }
            interface ProcessInfo {
                CPUPercent: number;
                memoryPercent: number;
                send: number;
                receive: number;
            }
            interface SystemProcessResult extends SystemApiRequestResult {
                result: {
                    systemProcess: {
                        usageCPU: UsageCPU;
                        usageMemory: MemoryInfo;
                        usageNetwork: NetworkInfo;
                        processData: ProcessInfo;
                    };
                };
            }
            interface GetAllUntreatedTrsCountResult extends SystemApiRequestResult {
                result: false | number;
            }
            interface ClearAllUntreatedTrsResult extends SystemApiRequestResult {
                result: true | "untreatedTrs is clearing";
            }
            interface RestoreAllUntreatedTrsResult extends SystemApiRequestResult {
                result: true | "untreatedTrs is in restore";
            }
            interface BasicApiSuccessReturnResult<T extends SystemApiRequestResult> extends ApiSuccessReturn<T> {
                result: T;
            }
            interface SystemApiFailureReturn extends ApiFailureReturn {
            }
            type SystemApiReturn<T extends SystemApiRequestResult> = BFMetaNodeSDK.Basic.BasicApiSuccessReturn<T> | SystemApiFailureReturn;
            type SystemApi = import("./apis/_systemGetApi").SystemGetApi<any> | import("./apis/_systemPostApi").SystemPostApi<any>;
            type SafetyCloseApi = import("./apis").SafetyCloseApi;
            type SetSystemKeyApi = import("./apis").SetSystemKeyApi;
            type VerifySystemKeyApi = import("./apis").VerifySystemKeyApi;
            type AddSystemAdminApi = import("./apis").AddSystemAdminApi;
            type GetSystemAdminApi = import("./apis").GetSystemAdminApi;
            type VerifySystemAdminApi = import("./apis").VerifySystemAdminApi;
            type DeleteSystemAdminApi = import("./apis").DeleteSystemAdminApi;
            type ResetSystemAdminApi = import("./apis").ResetSystemAdminApi;
            type BindingAccountApi = import("./apis").BindingAccountApi;
            type GetSystemDelegateApi = import("./apis").GetSystemDelegateApi;
            type SetSystemConfigApi = import("./apis").SetSystemConfigApi;
            type GetSystemConfigInfoDetailApi = import("./apis").GetSystemConfigInfoDetailApi;
            type GetRuntimeStateApi = import("./apis").GetRuntimeStateApi;
            type MiningMachineInfoApi = import("./apis").MiningMachineInfoApi;
            type GetSystemMonitorApi = import("./apis").GetSystemMonitorApi;
            type GetSystemLoggerTypeApi = import("./apis").GetSystemLoggerTypeApi;
            type GetSystemLoggerListApi = import("./apis").GetSystemLoggerListApi;
            type GetSystemLoggerDetailApi = import("./apis").GetSystemLoggerDetailApi;
            type DeleteSystemLoggerApi = import("./apis").DeleteSystemLoggerApi;
            type GetEmailAddressApi = import("./apis").GetEmailAddressApi;
            type SetEmailAddressApi = import("./apis").SetEmailAddressApi;
            type VerifySystemSecretApi = import("./apis").VerifySystemSecretApi;
            type SetSystemWhiteListApi = import("./apis").SetSystemWhiteListApi;
            type GetSystemWhiteListApi = import("./apis").GetSystemWhiteListApi;
            type DeleteSystemWhiteListApi = import("./apis").DeleteSystemWhiteListApi;
            type GetProcessCPUApi = import("./apis").GetProcessCPUApi;
            type GetProcessMemoryApi = import("./apis").GetProcessMemoryApi;
            type GetProcessNetworkApi = import("./apis").GetProcessNetworkApi;
            type SystemStatusApi = import("./apis").SystemStatusApi;
            type SystemProcessApi = import("./apis").SystemProcessApi;
            type GetAllUntreatedTrsCountApi = import("./apis").GetAllUntreatedTrsCountApi;
            type ClearAllUntreatedTrsApi = import("./apis").ClearAllUntreatedTrsApi;
            type RestoreAllUntreatedTrsApi = import("./apis").RestoreAllUntreatedTrsApi;
        }
    }
}
