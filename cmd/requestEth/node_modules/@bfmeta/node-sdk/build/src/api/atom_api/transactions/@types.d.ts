export {};
declare global {
    export namespace BFMetaNodeSDK {
        namespace Transaction {
            interface SuccessCreateResult {
                success: true;
                result: {
                    buffer: string;
                };
            }
            interface FailureCreateResult {
                success: false;
                error: {
                    code: string;
                    message: string;
                };
                minFee: string;
            }
            type CreateResult = SuccessCreateResult | FailureCreateResult;
            interface SuccessPackageResult {
                success: true;
                result: {
                    buffer: string;
                };
            }
            interface FailurePackageResult {
                success: false;
                error: {
                    code: string;
                    message: string;
                };
            }
            type PackageResult = SuccessPackageResult | FailurePackageResult;
            interface SuccessBroadcastResult<T> {
                success: true;
                result: T;
                minFee: number;
            }
            interface FailureBroadcastResult {
                success: false;
                message: string;
                minFee: number;
            }
            type BroadcastResult<T> = SuccessBroadcastResult<T> | FailureBroadcastResult;
            interface TransactionApiSuccessReturn<T> extends ApiSuccessReturn<T> {
                result: T;
                minFee: string;
            }
            interface TransactionApiFailureReturn extends ApiFailureReturn {
                minFee: string;
            }
            type TransactionApiReturn<T> = TransactionApiSuccessReturn<T> | TransactionApiFailureReturn;
            type KVStorageInfo = {
                key: string;
                fileInfo: {
                    name: string;
                    size: number;
                };
            };
            interface TransactionCommonParams {
                publicKey: string;
                secondPublicKey?: string;
                recipientId?: string;
                rangeType?: number;
                range?: string[];
                fee: string;
                applyBlockHeight: number;
                remark?: {
                    [key: string]: string;
                };
                dappid?: string;
                lns?: string;
                sourceIP?: string;
                fromMagic?: string;
                toMagic?: string;
                numberOfEffectiveBlocks?: number;
                binaryInfos?: KVStorageInfo[];
                timestamp?: number;
            }
            type TransactionCommonParamsWithRecipientId = TransactionCommonParams & {
                recipientId: string;
            };
            type TransactionCommonParamsWithoutRecipientId = Omit<TransactionCommonParams, "recipientId">;
            interface UsernameTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                alias: string;
            }
            interface SignatureTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                newSecondPublicKey: string;
            }
            interface DelegateTransactionParams extends TransactionCommonParamsWithoutRecipientId {
            }
            interface AcceptVoteTransactionParams extends TransactionCommonParamsWithoutRecipientId {
            }
            interface RejectVoteTransactionParams extends TransactionCommonParamsWithoutRecipientId {
            }
            interface VoteTransactionParams extends TransactionCommonParamsWithRecipientId {
                equity: string;
            }
            interface IssueAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                assetType: string;
                expectedIssuedAssets: string;
            }
            interface TransferAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                sourceChainMagic?: string;
                sourceChainName?: string;
                assetType?: string;
                amount: string;
            }
            interface DestroyAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                assetType: string;
                amount: string;
            }
            interface AccountSignatureJSON {
                publicKey: string;
                signature: string;
                secondPublicKey?: string;
                signSignature?: string;
            }
            interface GiftAssetTransactionParams extends TransactionCommonParams {
                sourceChainMagic?: string;
                sourceChainName?: string;
                assetType?: string;
                amount: string;
                totalGrabableTimes: number;
                numberOfBeginUnfrozenBlocks?: number;
                giftDistributionRule: number;
                cipherPublicKeys?: string[];
            }
            interface GrabAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                amount?: string;
                blockSignature: string;
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                recipientId: string;
                giftAsset: {
                    cipherPublicKeys: string[];
                    sourceChainName: string;
                    sourceChainMagic: string;
                    assetType: string;
                    amount: string;
                    totalGrabableTimes: number;
                    beginUnfrozenBlockHeight?: number;
                    giftDistributionRule: number;
                };
            }
            interface TrustAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                sourceChainMagic?: string;
                sourceChainName?: string;
                assetType?: string;
                amount: string;
                numberOfSignFor: number;
                trustees: string[];
            }
            interface SignForAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                trustId: string;
                trustAsset: {
                    trustees: string[];
                    numberOfSignFor: number;
                    sourceChainName: string;
                    sourceChainMagic: string;
                    assetType: string;
                    amount: string;
                };
            }
            interface ToExchangeAssetTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                toExchangeSource: string;
                beExchangeSource: string;
                toExchangeChainName: string;
                beExchangeChainName: string;
                toExchangeAsset: string;
                beExchangeAsset: string;
                toExchangeNumber: string;
                prevWeight: string;
                nextWeight: string;
                cipherPublicKeys?: string[];
            }
            interface RateJSON<T extends number | bigint | string = number> {
                prevWeight: T;
                nextWeight: T;
            }
            interface BeExchangeAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                toExchangeNumber: string;
                beExchangeNumber?: string;
                ciphertextSignature?: AccountSignatureJSON;
                recipientId: string;
                exchangeAsset: {
                    cipherPublicKeys: string[];
                    toExchangeSource: string;
                    beExchangeSource: string;
                    toExchangeChainName: string;
                    beExchangeChainName: string;
                    toExchangeAsset: string;
                    beExchangeAsset: string;
                    toExchangeNumber: string;
                    exchangeRate: RateJSON<string>;
                };
            }
            interface DAppTransactionParams extends TransactionCommonParamsWithRecipientId {
                newDappid: string;
                type: number;
                amount?: string;
            }
            interface DAppPurchasingTransactionParams extends TransactionCommonParamsWithRecipientId {
                type: number;
                purchaseAsset: string;
                purchaseDappid: string;
            }
            interface MarkTransactionParams extends TransactionCommonParamsWithRecipientId {
                content: string;
                action: string;
                dappid: string;
                type: number;
                purchaseAsset?: string;
            }
            interface LocationNameTransactionParams extends TransactionCommonParamsWithRecipientId {
                name: string;
                operationType: number;
            }
            interface SetLnsManagerTransactionParams extends TransactionCommonParamsWithRecipientId {
                name: string;
            }
            interface SetLnsRecordValueTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                name: string;
                operationType: number;
                addRecord?: string[];
                deleteRecord?: string[];
            }
            interface ToExchangeSpecialAssetTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                toExchangeSource: string;
                beExchangeSource: string;
                toExchangeChainName: string;
                beExchangeChainName: string;
                toExchangeAsset: string;
                beExchangeAsset: string;
                exchangeNumber: string;
                exchangeAssetType: number;
                exchangeDirection: number;
                cipherPublicKeys?: string[];
            }
            interface BeExchangeSpecialAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                recipientId: string;
                exchangeSpecialAsset: {
                    cipherPublicKeys: string[];
                    toExchangeSource: string;
                    beExchangeSource: string;
                    toExchangeChainName: string;
                    beExchangeChainName: string;
                    toExchangeAsset: string;
                    beExchangeAsset: string;
                    exchangeNumber: string;
                    exchangeAssetType: number;
                    exchangeDirection: number;
                };
            }
            interface IssueEntityFactoryTransactionParams extends TransactionCommonParamsWithRecipientId {
                factoryId: string;
                entityPrealnum: string;
                entityFrozenAssetPrealnum: string;
                purchaseAssetPrealnum: string;
            }
            type IssueEntityFactoryTransactionV1Params = IssueEntityFactoryTransactionParams;
            interface IssueEntityTransactionParams extends TransactionCommonParamsWithRecipientId {
                factoryId: string;
                entityId: string;
                taxAssetPrealnum?: string;
                taxAssetRecipientId?: string;
            }
            interface DestroyEntityTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                entityId: string;
                entityFactoryApplicant: string;
                entityFactoryPossessor: string;
                entityPrealnum: string;
                entityFrozenAssetPrealnum: string;
                purchaseAssetPrealnum: string;
            }
            interface AssetExchangeWeightRatioJSON {
                toExchangeAssetWeight: string;
                beExchangeAssetWeight: string;
            }
            interface TaxInformationJson {
                taxCollector: string;
                taxAssetPrealnum: string;
            }
            interface ToExchangeAnyTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                toExchangeSource?: string;
                toExchangeChainName?: string;
                toExchangeParentAssetType: number;
                toExchangeAssetType: string;
                toExchangeAssetPrealnum: string;
                beExchangeSource?: string;
                beExchangeChainName?: string;
                beExchangeParentAssetType: number;
                beExchangeAssetType: string;
                beExchangeAssetPrealnum?: string;
                assetExchangeWeightRatio?: AssetExchangeWeightRatioJSON;
                taxInformation?: TaxInformationJson;
                cipherPublicKeys?: string[];
            }
            interface BeExchangeAnyTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                toExchangeAssetPrealnum: string;
                beExchangeAssetPrealnum: string;
                exchangeAny: {
                    cipherPublicKeys: string[];
                    toExchangeSource?: string;
                    beExchangeSource?: string;
                    toExchangeChainName?: string;
                    beExchangeChainName?: string;
                    toExchangeParentAssetType: number;
                    beExchangeParentAssetType: number;
                    toExchangeAssetType: string;
                    beExchangeAssetType: string;
                    toExchangeAssetPrealnum: string;
                    beExchangeAssetPrealnum?: string;
                    assetExchangeWeightRatio?: AssetExchangeWeightRatioJSON;
                    taxInformation?: TaxInformationJson;
                };
                taxInformation?: TaxInformationJson;
            }
            interface TransferAnyTransactionParams extends TransactionCommonParamsWithRecipientId {
                sourceChainMagic?: string;
                sourceChainName?: string;
                parentAssetType: number;
                assetType: string;
                amount: string;
                taxInformation?: TaxInformationJson;
            }
            interface GiftAnyTransactionParams extends TransactionCommonParams {
                sourceChainMagic?: string;
                sourceChainName?: string;
                parentAssetType: number;
                assetType: string;
                amount: string;
                totalGrabableTimes?: number;
                giftDistributionRule?: number;
                numberOfBeginUnfrozenBlocks?: number;
                cipherPublicKeys?: string[];
                taxInformation?: TaxInformationJson;
            }
            interface GrabAnyTransactionParams extends TransactionCommonParamsWithRecipientId {
                amount?: string;
                blockSignature: string;
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                recipientId: string;
                giftAny: {
                    cipherPublicKeys: string[];
                    sourceChainName: string;
                    sourceChainMagic: string;
                    parentAssetType: number;
                    assetType: string;
                    amount: string;
                    totalGrabableTimes: number;
                    beginUnfrozenBlockHeight?: number;
                    giftDistributionRule?: number;
                    taxInformation?: TaxInformationJson;
                };
            }
            interface IssueEntityMultiTransactionParams extends TransactionCommonParamsWithRecipientId {
                factoryId: string;
                entityStructList: {
                    entityId: string;
                    taxAssetPrealnum?: string;
                    taxAssetRecipientId?: string;
                }[];
            }
            interface ToExchangeAnyMultiTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                cipherPublicKeys?: string[];
                toExchangeAssets: {
                    toExchangeSource?: string;
                    toExchangeChainName?: string;
                    toExchangeParentAssetType: number;
                    toExchangeAssetType: string;
                    toExchangeAssetPrealnum: string;
                    assetExchangeWeightRatio?: AssetExchangeWeightRatioJSON;
                    taxInformation?: TaxInformationJson;
                }[];
                beExchangeAsset: {
                    beExchangeSource?: string;
                    beExchangeChainName?: string;
                    beExchangeParentAssetType: number;
                    beExchangeAssetType: string;
                    beExchangeAssetPrealnum?: string;
                    taxInformation?: TaxInformationJson;
                };
            }
            interface BeExchangeAnyMultiTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                toExchangeAssets: {
                    toExchangeSource: string;
                    toExchangeChainName: string;
                    toExchangeParentAssetType: number;
                    toExchangeAssetType: string;
                    toExchangeAssetPrealnum: string;
                    assetExchangeWeightRatio?: AssetExchangeWeightRatioJSON;
                    taxInformation?: TaxInformationJson;
                }[];
                beExchangeAsset: {
                    beExchangeSource: string;
                    beExchangeChainName: string;
                    beExchangeParentAssetType: number;
                    beExchangeAssetType: string;
                    beExchangeAssetPrealnum?: string;
                    taxInformation?: TaxInformationJson;
                };
            }
            interface ToExchangeAnyMultiAllTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                cipherPublicKeys?: string[];
                toExchangeAssets: {
                    toExchangeSource?: string;
                    toExchangeChainName?: string;
                    toExchangeParentAssetType: number;
                    toExchangeAssetType: string;
                    toExchangeAssetPrealnum: string;
                    taxInformation?: TaxInformationJson;
                }[];
                beExchangeAssets: {
                    beExchangeSource?: string;
                    beExchangeChainName?: string;
                    beExchangeParentAssetType: number;
                    beExchangeAssetType: string;
                    beExchangeAssetPrealnum?: string;
                    taxInformation?: TaxInformationJson;
                }[];
            }
            interface BeExchangeAnyMultiAllTransactionParams extends TransactionCommonParamsWithRecipientId {
                transactionSignature: string;
                ciphertextSignature?: AccountSignatureJSON;
                toExchangeAssets: {
                    toExchangeSource: string;
                    toExchangeChainName: string;
                    toExchangeParentAssetType: number;
                    toExchangeAssetType: string;
                    toExchangeAssetPrealnum: string;
                    taxInformation?: TaxInformationJson;
                }[];
                beExchangeAssets: {
                    beExchangeSource: string;
                    beExchangeChainName: string;
                    beExchangeParentAssetType: number;
                    beExchangeAssetType: string;
                    beExchangeAssetPrealnum?: string;
                    taxInformation?: TaxInformationJson;
                }[];
            }
            interface RegisterChainTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                genesisBlock: string;
            }
            interface MigrateCertificateBodyJSON {
                version: string;
                fromId: string;
                toId: string;
                timestamp: number;
                fromChainId: string;
                toChainId: string;
                assetId: string;
                assetPrealnum: string;
            }
            interface MigrateCertificateJSON {
                body: MigrateCertificateBodyJSON;
                signature: string;
                fromAuthSignature: string;
                toAuthSignature: string;
            }
            interface EmigrateAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                migrateCertificate: MigrateCertificateJSON;
            }
            interface ImmigrateAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                migrateCertificate: MigrateCertificateJSON;
            }
            interface IssueCertificateTransactionParams extends TransactionCommonParamsWithRecipientId {
                certificateId: string;
                type: number;
            }
            interface DestroyCertificateTransactionParams extends TransactionCommonParamsWithRecipientId {
                certificateId: string;
                type: number;
            }
            interface PromiseTransactionParams extends TransactionCommonParamsWithRecipientId {
                transaction: TransactionJSON;
            }
            interface PromiseResolveTransactionParams extends TransactionCommonParamsWithRecipientId {
                promiseId: string;
                transaction: TransactionJSON;
            }
            interface PromiseTransactionParams extends TransactionCommonParamsWithRecipientId {
                transaction: TransactionJSON;
            }
            interface PromiseResolveTransactionParams extends TransactionCommonParamsWithRecipientId {
                promiseId: string;
                transaction: TransactionJSON;
            }
            interface MacroTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                inputs: Macro.InputJSON[];
                template: TransactionJSON;
            }
            interface MacroCallTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                macroId: string;
                inputs: {
                    [name: string]: string;
                };
                transaction: TransactionJSON;
            }
            interface MultipleTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                transactions: TransactionJSON[];
            }
            interface IncreaseAssetTransactionParams extends TransactionCommonParamsWithRecipientId {
                applyAddress: string;
                assetType: string;
                increasedAssetPrealnum: string;
                frozenMainAssetPrealnum: string;
            }
            interface StakeAssetTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                stakeId: string;
                sourceChainName?: string;
                sourceChainMagic?: string;
                assetType: string;
                assetPrealnum: string;
                beginUnstakeHeight: number;
            }
            interface UnstakeAssetTransactionParams extends TransactionCommonParamsWithoutRecipientId {
                stakeId: string;
                sourceChainName?: string;
                sourceChainMagic?: string;
                assetType: string;
                assetPrealnum: string;
            }
            type PackageTransacationParams = {
                signature: string;
                buffer: string;
            };
            type BroadcastTransacationParams = {
                signature: string;
                signSignature?: string;
                buffer: string;
                isOnChain?: boolean;
            };
            type TransactionApi = import("./atom_transaction/_transactionApi").TransactionApi;
            type CommonTransactionApi = import("./atom_transaction").CommonTransactionApi;
            type UsernameApi = import("./atom_transaction").UsernameApi;
            type SignatureApi = import("./atom_transaction").SignatureApi;
            type DelegateApi = import("./atom_transaction").DelegateApi;
            type AcceptVoteApi = import("./atom_transaction").AcceptVoteApi;
            type RejectVoteApi = import("./atom_transaction").RejectVoteApi;
            type VoteApi = import("./atom_transaction").VoteApi;
            type IssueAssetApi = import("./atom_transaction").IssueAssetApi;
            type TransferAssetApi = import("./atom_transaction").TransferAssetApi;
            type DestroyAssetApi = import("./atom_transaction").DestroyAssetApi;
            type GiftAssetApi = import("./atom_transaction").GiftAssetApi;
            type GrabAssetApi = import("./atom_transaction").GrabAssetApi;
            type TrustAssetApi = import("./atom_transaction").TrustAssetApi;
            type SignForAssetApi = import("./atom_transaction").SignForAssetApi;
            type ToExchangeAssetApi = import("./atom_transaction").ToExchangeAssetApi;
            type BeExchangeAssetApi = import("./atom_transaction").BeExchangeAssetApi;
            type DAppApi = import("./atom_transaction").DAppApi;
            type DAppPurchasingApi = import("./atom_transaction").DAppPurchasingApi;
            type MarkApi = import("./atom_transaction").MarkApi;
            type LocationNameApi = import("./atom_transaction").LocationNameApi;
            type SetLnsManagerApi = import("./atom_transaction").SetLnsManagerApi;
            type SetLnsRecordValueApi = import("./atom_transaction").SetLnsRecordValueApi;
            type ToExchangeSpecialAssetApi = import("./atom_transaction").ToExchangeSpecialAssetApi;
            type BeExchangeSpecialAssetApi = import("./atom_transaction").BeExchangeSpecialAssetApi;
            type IssueEntityFactoryApi = import("./atom_transaction").IssueEntityFactoryApi;
            type IssueEntityFactoryV1Api = import("./atom_transaction").IssueEntityFactoryV1Api;
            type IssueEntityApi = import("./atom_transaction").IssueEntityApi;
            type DestroyEntityApi = import("./atom_transaction").DestroyEntityApi;
            type ToExchangeAnyApi = import("./atom_transaction").ToExchangeAnyApi;
            type BeExchangeAnyApi = import("./atom_transaction").BeExchangeAnyApi;
            type TransferAnyApi = import("./atom_transaction").TransferAnyApi;
            type GiftAnyApi = import("./atom_transaction").GiftAnyApi;
            type GrabAnyApi = import("./atom_transaction").GrabAnyApi;
            type IssueEntityMultiApi = import("./atom_transaction").IssueEntityMultiApi;
            type ToExchangeAnyMultiApi = import("./atom_transaction").ToExchangeAnyMultiApi;
            type BeExchangeAnyMultiApi = import("./atom_transaction").BeExchangeAnyMultiApi;
            type ToExchangeAnyMultiAllApi = import("./atom_transaction").ToExchangeAnyMultiAllApi;
            type BeExchangeAnyMultiAllApi = import("./atom_transaction").BeExchangeAnyMultiAllApi;
            type RegisterChainApi = import("./atom_transaction").RegisterChainApi;
            type EmigrateAssetApi = import("./atom_transaction").EmigrateAssetApi;
            type ImmigrateAssetApi = import("./atom_transaction").ImmigrateAssetApi;
            type IssueCertificateApi = import("./atom_transaction").IssueCertificateApi;
            type DestroyCertificateApi = import("./atom_transaction").DestroyCertificateApi;
            type MacroApi = import("./atom_transaction").MacroApi;
            type MacroCallApi = import("./atom_transaction").MacroCallApi;
            type PromiseApi = import("./atom_transaction").PromiseApi;
            type PromiseResolveApi = import("./atom_transaction").PromiseResolveApi;
            type MultipleApi = import("./atom_transaction").MultipleApi;
            type IncreaseAssetApi = import("./atom_transaction").IncreaseAssetApi;
            type StakeAssetApi = import("./atom_transaction").StakeAssetApi;
            type UnstakeAssetApi = import("./atom_transaction").UnstakeAssetApi;
        }
        interface ChainBaseInfo {
            chainName: string;
            magic: string;
            genesisBlockSignature: string;
        }
        interface AssetBaseInfo {
            parentAssetType: number;
            assetType: string;
        }
        namespace CrossChain {
            interface GenerateMigrateCertificateArgs {
                senderSecret: string;
                senderSecondSecret?: string;
                recipientId: string;
                toChainInfo: ChainBaseInfo;
                assetInfo: AssetBaseInfo;
                assetPrealnum: string;
            }
            interface GenerateMigrateCertificateParams extends Omit<CrossChain.GenerateMigrateCertificateArgs, "assetInfo"> {
                assetInfo?: {
                    parentAssetType: number;
                    assetType: string;
                };
            }
            interface AuthSignMigrateCertificateArgs {
                authSecret: string;
                authSecondSecret?: string;
                version?: string;
                migrateCertificate: BFMetaNodeSDK.Transaction.MigrateCertificateJSON;
            }
            type MigrateCertificateApi = import("./migrate_certificate/_migrateCertificateApi").MigrateCertificateApi;
            type GenerateMigrateCertificateApi = import("./migrate_certificate").GenerateMigrateCertificateApi;
            type FromAuthSignatureMigrateCertificateApi = import("./migrate_certificate").FromAuthSignatureMigrateCertificateApi;
            type ToAuthSignatureMigrateCertificateApi = import("./migrate_certificate").ToAuthSignatureMigrateCertificateApi;
        }
        namespace Common {
            interface CommonParams {
            }
            interface VerifyAddressParams extends CommonParams {
                address: string;
            }
            interface VerifyPublicKeyParams extends CommonParams {
                publicKey: string;
            }
            interface GenerateAccountParams extends CommonParams {
                secret: string;
                secondSecret?: string;
            }
            interface GenerateAddressBySecretParams extends CommonParams {
                secret: string;
            }
            interface GenerateAddressByPublicKeyParams extends CommonParams {
                publicKey: string;
            }
            interface AccountInfo {
                address: string;
                publicKey: string;
                secondPublicKey?: string;
            }
            interface AsymmetricEncryptParams extends CommonParams {
                msg: string;
                decryptPK: string;
                encryptSK: string;
            }
            interface AsymmetricDecryptParams extends CommonParams {
                encryptedMessage: string;
                encryptPK: string;
                decryptSK: string;
                nonce?: string;
            }
            interface AsymmetricEncrypt {
                nonce: string;
                encryptedMessage: string;
            }
            type AsymmetricDecrypt = false | string;
            interface GenerateKeypairParams extends CommonParams {
                secret: string;
                secondSecret?: string;
            }
            interface Keypairs {
                keypair: {
                    publicKey: string;
                    secretKey: string;
                };
                secondKeypair?: {
                    publicKey: string;
                    secretKey: string;
                };
            }
            interface TransactionStorageJSON {
                key: string;
                value: string;
            }
            interface TransactionJSON<AssetJSON extends object = object> {
                version: number;
                type: string;
                senderId: string;
                senderPublicKey: string;
                senderSecondPublicKey?: string;
                recipientId?: string;
                rangeType: 0 | 1 | 2 | 4;
                range: string[];
                fee: string;
                timestamp: number;
                dappid?: string;
                lns?: string;
                sourceIP?: string;
                fromMagic: string;
                toMagic: string;
                applyBlockHeight: number;
                effectiveBlockHeight: number;
                signature: string;
                signSignature?: string;
                remark: {
                    [key: string]: string;
                };
                asset: AssetJSON;
                storage?: TransactionStorageJSON;
                storageKey?: TransactionStorageJSON["key"];
                storageValue?: TransactionStorageJSON["value"];
                nonce: number;
            }
            interface FractionJSON<T extends number | bigint | string = number> {
                numerator: T;
                denominator: T;
            }
            interface CalcTransactionMinFeeParams extends CommonParams {
                transaction: TransactionJSON;
                customMinFeePerByte?: FractionJSON;
            }
            interface TransactionMinFee {
                minFee: string;
            }
            interface GenerateCiphertextSignatureParams extends CommonParams {
                secret: string;
                transactionSignature: string;
                senderId: string;
            }
            type CommonApi = import("./atom_common/_commonApi").CommonApi<any>;
            type VerifyAddressApi = import("./atom_common/verifyAddressApi").VerifyAddressApi;
            type VerifyPublicKeyApi = import("./atom_common/verifyPublicKeyApi").VerifyPublicKeyApi;
            type GenerateKeypairApi = import("./atom_common/generateKeypairApi").GenerateKeypairApi;
            type GenerateAccountApi = import("./atom_common/generateAccountApi").GenerateAccountApi;
            type GenerateAddressBySecretApi = import("./atom_common/generateAddressBySecretApi").GenerateAddressBySecretApi;
            type GenerateAddressByPublicKeyApi = import("./atom_common/generateAddressByPublicKeyApi").GenerateAddressByPublicKeyApi;
            type AsymmetricEncryptApi = import("./atom_common/asymmetricEncryptApi").AsymmetricEncryptApi;
            type AsymmetricDecryptApi = import("./atom_common/asymmetricDecryptApi").AsymmetricDecryptApi;
            type CalcTransactionMinFeeApi = import("./atom_common/calcTransactionMinFee").CalcTransactionMinFeeApi;
            type GenerateCiphertextSignatureApi = import("./atom_common/generateCiphertextSignatureApi").GenerateCiphertextSignatureApi;
        }
    }
}
