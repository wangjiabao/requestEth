"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BFMetaSDK = void 0;
const api_1 = require("./api");
const sign_util_1 = require("@bfmeta/sign-util");
class BFMetaSDK {
    configOptions;
    signUtilParam;
    fetch;
    __api;
    __configOptions = {};
    __bfchainSignUtil;
    constructor(configOptions, signUtilParam, fetch) {
        this.configOptions = configOptions;
        this.signUtilParam = signUtilParam;
        this.fetch = fetch;
        if (configOptions) {
            this.__configOptions = configOptions;
        }
        this.__api = new api_1.Api(this.__configOptions, fetch);
        if (this.signUtilParam) {
            this.setSignUtil(this.signUtilParam);
        }
    }
    get api() {
        return this.__api;
    }
    get bfchainSignUtil() {
        if (this.__bfchainSignUtil) {
            return this.__bfchainSignUtil;
        }
        else {
            throw new Error(`bfchainSignUtil is not init`);
        }
    }
    setSignUtil(signUtilParam) {
        const { netType, cryptoHelper } = signUtilParam;
        let bnid = "";
        if (netType === "mainnet") {
            bnid = "b";
        }
        else if (netType === "testnet") {
            bnid = "c";
        }
        else {
            throw new Error(`invaild netType: ${netType}`);
        }
        this.__bfchainSignUtil = new sign_util_1.BFMetaSignUtil(bnid, Buffer, cryptoHelper);
    }
    setApiConfig(configOptions) {
        this.api.setApiconfig(configOptions);
    }
    getSocketByNode(node) {
        return this.api.websocketHelper.getSocketByNode(node);
    }
    getUpgradeSocket() {
        return this.api.websocketHelper.upgradeSocket;
    }
}
exports.BFMetaSDK = BFMetaSDK;
