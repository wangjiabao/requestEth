export {};
declare global {
    export namespace BFMetaNodeSDK {
        type AllPartial<T> = {
            [P in keyof T]?: AllPartial<T[P]>;
        };
        interface AutoVote {
            enable: boolean;
            useConfigFee: boolean;
            fee: string;
            priorRecommendedNumber: boolean;
            maxNumberOfRecommended: number;
            numberOfRounds: number;
            productivityPercent: number;
            forgedBlocksPercent: number;
            applyTxPercent: number;
            votePercent: number;
            newDelegatePercent: number;
            minBeSelectProductivity: number;
        }
        interface SchemaType {
            id?: string;
            type: string;
            properties?: {
                [k: string]: SchemaType;
            };
            required?: string[];
            minimum?: number;
            maximum?: number;
            items?: SchemaType;
            format?: string;
        }
        interface FetchInterface {
            get(url: string): Promise<any>;
            post(url: string, data: any): Promise<any>;
        }
        interface TransactionStorageJSON {
            key: string;
            value: string;
        }
        interface TransactionJSON<AssetJSON extends object = object> {
            version: number;
            type: string;
            senderId: string;
            senderPublicKey: string;
            senderSecondPublicKey?: string;
            recipientId?: string;
            rangeType: 0 | 1 | 2 | 4;
            range: string[];
            fee: string;
            timestamp: number;
            dappid?: string;
            lns?: string;
            sourceIP?: string;
            fromMagic: string;
            toMagic: string;
            applyBlockHeight: number;
            effectiveBlockHeight: number;
            signature: string;
            signSignature?: string;
            remark: {
                [key: string]: string;
            };
            asset: AssetJSON;
            storage?: TransactionStorageJSON;
            storageKey?: TransactionStorageJSON["key"];
            storageValue?: TransactionStorageJSON["value"];
            nonce: number;
        }
    }
}
