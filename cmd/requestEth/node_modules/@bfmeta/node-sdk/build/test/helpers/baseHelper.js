"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomCertificateId = exports.ASSET_INFO = exports.CHAIN_INFO = exports.bfmetaSDK = exports.fecthDemo = exports.cryptoHelper = void 0;
const cryptoHelper_1 = require("./cryptoHelper");
const fecthDemo_1 = require("./fecthDemo");
const src_1 = require("../../src");
exports.cryptoHelper = new cryptoHelper_1.CryptoHelper();
exports.fecthDemo = new fecthDemo_1.FecthDemo();
exports.bfmetaSDK = new src_1.BFMetaSDK({
    node: {
        ip: "192.168.200.21",
        port: 19003,
    },
    multiNodes: {
        enable: true,
        nodes: [
            {
                ip: "34.84.140.206",
                port: 19003,
            },
        ],
    },
    requestTimeOut: 10000,
    requestProtocol: "websocket",
}, { netType: "testnet", cryptoHelper: exports.cryptoHelper }, exports.fecthDemo);
exports.CHAIN_INFO = {
    chainName: "bfmetatest",
    chainAssetType: "BFMTEST",
    chainMagic: "YC4CN",
};
exports.ASSET_INFO = {
    chainName: "bfmetatest",
    assetType: "PMC",
    chainMagic: "YC4CN",
};
function getWrods() {
    let words = "-_";
    for (let i = 0; i < 10; i++) {
        words += i;
    }
    const buf1 = Buffer.allocUnsafe(26);
    const buf2 = Buffer.allocUnsafe(26);
    for (let i = 0; i < 26; i++) {
        buf1[i] = i + 97;
        buf2[i] = i + 65;
    }
    words += buf1.toString("ascii") + buf2.toString("ascii");
    return words;
}
function getRandomCertificateId(onChainHeight, len) {
    const suffixLen = len || Math.ceil(Math.random() * 100);
    const prefix = onChainHeight || Math.ceil(Math.random() * 10 ** 8);
    const words = getWrods();
    let suffix = "";
    for (let i = 0; i < suffixLen; i++) {
        suffix += words[Math.floor(Math.random() * words.length)];
    }
    return `${prefix}:${suffix}`;
}
exports.getRandomCertificateId = getRandomCertificateId;
