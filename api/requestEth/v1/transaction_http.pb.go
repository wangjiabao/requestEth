// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.7
// source: api/requestEth/v1/transaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionEthBalance = "/api.requestEth.v1.Transaction/EthBalance"
const OperationTransactionGenerateKey = "/api.requestEth.v1.Transaction/GenerateKey"
const OperationTransactionSendTransaction = "/api.requestEth.v1.Transaction/SendTransaction"
const OperationTransactionSendTransactionBiw = "/api.requestEth.v1.Transaction/SendTransactionBiw"
const OperationTransactionSendTransactionEth = "/api.requestEth.v1.Transaction/SendTransactionEth"
const OperationTransactionTransaction = "/api.requestEth.v1.Transaction/Transaction"
const OperationTransactionUsdtBalance = "/api.requestEth.v1.Transaction/UsdtBalance"
const OperationTransactionUsdtBalanceBiw = "/api.requestEth.v1.Transaction/UsdtBalanceBiw"

type TransactionHTTPServer interface {
	EthBalance(context.Context, *EthBalanceRequest) (*EthBalanceReply, error)
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyReply, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionReply, error)
	SendTransactionBiw(context.Context, *SendTransactionBiwRequest) (*SendTransactionBiwReply, error)
	SendTransactionEth(context.Context, *SendTransactionEthRequest) (*SendTransactionEthReply, error)
	Transaction(context.Context, *TransactionRequest) (*TransactionReply, error)
	UsdtBalance(context.Context, *UsdtBalanceRequest) (*UsdtBalanceReply, error)
	UsdtBalanceBiw(context.Context, *UsdtBalanceBiwRequest) (*UsdtBalanceBiwReply, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.POST("/api/transaction", _Transaction_SendTransaction0_HTTP_Handler(srv))
	r.POST("/api/transaction_eth", _Transaction_SendTransactionEth0_HTTP_Handler(srv))
	r.GET("/api/transaction/{tx}", _Transaction_Transaction0_HTTP_Handler(srv))
	r.GET("/api/eth_balance", _Transaction_EthBalance0_HTTP_Handler(srv))
	r.GET("/api/generate_key", _Transaction_GenerateKey0_HTTP_Handler(srv))
	r.GET("/api/usdt_balance", _Transaction_UsdtBalance0_HTTP_Handler(srv))
	r.GET("/api/usdt_balance_biw", _Transaction_UsdtBalanceBiw0_HTTP_Handler(srv))
	r.POST("/api/send_transaction_biw", _Transaction_SendTransactionBiw0_HTTP_Handler(srv))
}

func _Transaction_SendTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTransactionRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionSendTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTransaction(ctx, req.(*SendTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_SendTransactionEth0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTransactionEthRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionSendTransactionEth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTransactionEth(ctx, req.(*SendTransactionEthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendTransactionEthReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_Transaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Transaction(ctx, req.(*TransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_EthBalance0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EthBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionEthBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EthBalance(ctx, req.(*EthBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EthBalanceReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_GenerateKey0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateKeyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionGenerateKey)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateKey(ctx, req.(*GenerateKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_UsdtBalance0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UsdtBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionUsdtBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UsdtBalance(ctx, req.(*UsdtBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UsdtBalanceReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_UsdtBalanceBiw0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UsdtBalanceBiwRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionUsdtBalanceBiw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UsdtBalanceBiw(ctx, req.(*UsdtBalanceBiwRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UsdtBalanceBiwReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_SendTransactionBiw0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTransactionBiwRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionSendTransactionBiw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTransactionBiw(ctx, req.(*SendTransactionBiwRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendTransactionBiwReply)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	EthBalance(ctx context.Context, req *EthBalanceRequest, opts ...http.CallOption) (rsp *EthBalanceReply, err error)
	GenerateKey(ctx context.Context, req *GenerateKeyRequest, opts ...http.CallOption) (rsp *GenerateKeyReply, err error)
	SendTransaction(ctx context.Context, req *SendTransactionRequest, opts ...http.CallOption) (rsp *SendTransactionReply, err error)
	SendTransactionBiw(ctx context.Context, req *SendTransactionBiwRequest, opts ...http.CallOption) (rsp *SendTransactionBiwReply, err error)
	SendTransactionEth(ctx context.Context, req *SendTransactionEthRequest, opts ...http.CallOption) (rsp *SendTransactionEthReply, err error)
	Transaction(ctx context.Context, req *TransactionRequest, opts ...http.CallOption) (rsp *TransactionReply, err error)
	UsdtBalance(ctx context.Context, req *UsdtBalanceRequest, opts ...http.CallOption) (rsp *UsdtBalanceReply, err error)
	UsdtBalanceBiw(ctx context.Context, req *UsdtBalanceBiwRequest, opts ...http.CallOption) (rsp *UsdtBalanceBiwReply, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) EthBalance(ctx context.Context, in *EthBalanceRequest, opts ...http.CallOption) (*EthBalanceReply, error) {
	var out EthBalanceReply
	pattern := "/api/eth_balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionEthBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...http.CallOption) (*GenerateKeyReply, error) {
	var out GenerateKeyReply
	pattern := "/api/generate_key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionGenerateKey))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...http.CallOption) (*SendTransactionReply, error) {
	var out SendTransactionReply
	pattern := "/api/transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionSendTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) SendTransactionBiw(ctx context.Context, in *SendTransactionBiwRequest, opts ...http.CallOption) (*SendTransactionBiwReply, error) {
	var out SendTransactionBiwReply
	pattern := "/api/send_transaction_biw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionSendTransactionBiw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) SendTransactionEth(ctx context.Context, in *SendTransactionEthRequest, opts ...http.CallOption) (*SendTransactionEthReply, error) {
	var out SendTransactionEthReply
	pattern := "/api/transaction_eth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionSendTransactionEth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) Transaction(ctx context.Context, in *TransactionRequest, opts ...http.CallOption) (*TransactionReply, error) {
	var out TransactionReply
	pattern := "/api/transaction/{tx}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) UsdtBalance(ctx context.Context, in *UsdtBalanceRequest, opts ...http.CallOption) (*UsdtBalanceReply, error) {
	var out UsdtBalanceReply
	pattern := "/api/usdt_balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionUsdtBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) UsdtBalanceBiw(ctx context.Context, in *UsdtBalanceBiwRequest, opts ...http.CallOption) (*UsdtBalanceBiwReply, error) {
	var out UsdtBalanceBiwReply
	pattern := "/api/usdt_balance_biw"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionUsdtBalanceBiw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
