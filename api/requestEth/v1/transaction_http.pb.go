// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/requestEth/v1/transaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionGenerateKey = "/api.requestEth.v1.Transaction/GenerateKey"
const OperationTransactionSendTransaction = "/api.requestEth.v1.Transaction/SendTransaction"
const OperationTransactionTransaction = "/api.requestEth.v1.Transaction/Transaction"

type TransactionHTTPServer interface {
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyReply, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionReply, error)
	Transaction(context.Context, *TransactionRequest) (*TransactionReply, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.POST("/api/transaction", _Transaction_SendTransaction0_HTTP_Handler(srv))
	r.GET("/api/transaction/{tx}", _Transaction_Transaction0_HTTP_Handler(srv))
	r.GET("/api/generate_key", _Transaction_GenerateKey0_HTTP_Handler(srv))
}

func _Transaction_SendTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTransactionRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionSendTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTransaction(ctx, req.(*SendTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_Transaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Transaction(ctx, req.(*TransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_GenerateKey0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateKeyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionGenerateKey)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateKey(ctx, req.(*GenerateKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateKeyReply)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	GenerateKey(ctx context.Context, req *GenerateKeyRequest, opts ...http.CallOption) (rsp *GenerateKeyReply, err error)
	SendTransaction(ctx context.Context, req *SendTransactionRequest, opts ...http.CallOption) (rsp *SendTransactionReply, err error)
	Transaction(ctx context.Context, req *TransactionRequest, opts ...http.CallOption) (rsp *TransactionReply, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...http.CallOption) (*GenerateKeyReply, error) {
	var out GenerateKeyReply
	pattern := "/api/generate_key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionGenerateKey))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...http.CallOption) (*SendTransactionReply, error) {
	var out SendTransactionReply
	pattern := "/api/transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionSendTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionHTTPClientImpl) Transaction(ctx context.Context, in *TransactionRequest, opts ...http.CallOption) (*TransactionReply, error) {
	var out TransactionReply
	pattern := "/api/transaction/{tx}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
