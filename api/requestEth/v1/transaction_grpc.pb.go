// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: api/requestEth/v1/transaction.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transaction_SendTransaction_FullMethodName    = "/api.requestEth.v1.Transaction/SendTransaction"
	Transaction_SendTransactionEth_FullMethodName = "/api.requestEth.v1.Transaction/SendTransactionEth"
	Transaction_Transaction_FullMethodName        = "/api.requestEth.v1.Transaction/Transaction"
	Transaction_EthBalance_FullMethodName         = "/api.requestEth.v1.Transaction/EthBalance"
	Transaction_GenerateKey_FullMethodName        = "/api.requestEth.v1.Transaction/GenerateKey"
	Transaction_TokenBalance_FullMethodName       = "/api.requestEth.v1.Transaction/TokenBalance"
	Transaction_VerifySig_FullMethodName          = "/api.requestEth.v1.Transaction/VerifySig"
	Transaction_GetReserves_FullMethodName        = "/api.requestEth.v1.Transaction/GetReserves"
	Transaction_GetAll_FullMethodName             = "/api.requestEth.v1.Transaction/GetAll"
	Transaction_PushOne_FullMethodName            = "/api.requestEth.v1.Transaction/PushOne"
	Transaction_PushThreeFour_FullMethodName      = "/api.requestEth.v1.Transaction/PushThreeFour"
)

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionClient interface {
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionReply, error)
	SendTransactionEth(ctx context.Context, in *SendTransactionEthRequest, opts ...grpc.CallOption) (*SendTransactionEthReply, error)
	Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionReply, error)
	EthBalance(ctx context.Context, in *EthBalanceRequest, opts ...grpc.CallOption) (*EthBalanceReply, error)
	GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyReply, error)
	TokenBalance(ctx context.Context, in *TokenBalanceRequest, opts ...grpc.CallOption) (*TokenBalanceReply, error)
	VerifySig(ctx context.Context, in *VerifySigRequest, opts ...grpc.CallOption) (*VerifySigReply, error)
	GetReserves(ctx context.Context, in *GetReservesRequest, opts ...grpc.CallOption) (*GetReservesReply, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllReply, error)
	PushOne(ctx context.Context, in *PushOneRequest, opts ...grpc.CallOption) (*PushOneReply, error)
	PushThreeFour(ctx context.Context, in *PushThreeFourRequest, opts ...grpc.CallOption) (*PushThreeFourReply, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionReply, error) {
	out := new(SendTransactionReply)
	err := c.cc.Invoke(ctx, Transaction_SendTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) SendTransactionEth(ctx context.Context, in *SendTransactionEthRequest, opts ...grpc.CallOption) (*SendTransactionEthReply, error) {
	out := new(SendTransactionEthReply)
	err := c.cc.Invoke(ctx, Transaction_SendTransactionEth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionReply, error) {
	out := new(TransactionReply)
	err := c.cc.Invoke(ctx, Transaction_Transaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) EthBalance(ctx context.Context, in *EthBalanceRequest, opts ...grpc.CallOption) (*EthBalanceReply, error) {
	out := new(EthBalanceReply)
	err := c.cc.Invoke(ctx, Transaction_EthBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyReply, error) {
	out := new(GenerateKeyReply)
	err := c.cc.Invoke(ctx, Transaction_GenerateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) TokenBalance(ctx context.Context, in *TokenBalanceRequest, opts ...grpc.CallOption) (*TokenBalanceReply, error) {
	out := new(TokenBalanceReply)
	err := c.cc.Invoke(ctx, Transaction_TokenBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) VerifySig(ctx context.Context, in *VerifySigRequest, opts ...grpc.CallOption) (*VerifySigReply, error) {
	out := new(VerifySigReply)
	err := c.cc.Invoke(ctx, Transaction_VerifySig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetReserves(ctx context.Context, in *GetReservesRequest, opts ...grpc.CallOption) (*GetReservesReply, error) {
	out := new(GetReservesReply)
	err := c.cc.Invoke(ctx, Transaction_GetReserves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllReply, error) {
	out := new(GetAllReply)
	err := c.cc.Invoke(ctx, Transaction_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PushOne(ctx context.Context, in *PushOneRequest, opts ...grpc.CallOption) (*PushOneReply, error) {
	out := new(PushOneReply)
	err := c.cc.Invoke(ctx, Transaction_PushOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PushThreeFour(ctx context.Context, in *PushThreeFourRequest, opts ...grpc.CallOption) (*PushThreeFourReply, error) {
	out := new(PushThreeFourReply)
	err := c.cc.Invoke(ctx, Transaction_PushThreeFour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
// All implementations must embed UnimplementedTransactionServer
// for forward compatibility
type TransactionServer interface {
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionReply, error)
	SendTransactionEth(context.Context, *SendTransactionEthRequest) (*SendTransactionEthReply, error)
	Transaction(context.Context, *TransactionRequest) (*TransactionReply, error)
	EthBalance(context.Context, *EthBalanceRequest) (*EthBalanceReply, error)
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyReply, error)
	TokenBalance(context.Context, *TokenBalanceRequest) (*TokenBalanceReply, error)
	VerifySig(context.Context, *VerifySigRequest) (*VerifySigReply, error)
	GetReserves(context.Context, *GetReservesRequest) (*GetReservesReply, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllReply, error)
	PushOne(context.Context, *PushOneRequest) (*PushOneReply, error)
	PushThreeFour(context.Context, *PushThreeFourRequest) (*PushThreeFourReply, error)
	mustEmbedUnimplementedTransactionServer()
}

// UnimplementedTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServer struct {
}

func (UnimplementedTransactionServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedTransactionServer) SendTransactionEth(context.Context, *SendTransactionEthRequest) (*SendTransactionEthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionEth not implemented")
}
func (UnimplementedTransactionServer) Transaction(context.Context, *TransactionRequest) (*TransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedTransactionServer) EthBalance(context.Context, *EthBalanceRequest) (*EthBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthBalance not implemented")
}
func (UnimplementedTransactionServer) GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedTransactionServer) TokenBalance(context.Context, *TokenBalanceRequest) (*TokenBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBalance not implemented")
}
func (UnimplementedTransactionServer) VerifySig(context.Context, *VerifySigRequest) (*VerifySigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySig not implemented")
}
func (UnimplementedTransactionServer) GetReserves(context.Context, *GetReservesRequest) (*GetReservesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReserves not implemented")
}
func (UnimplementedTransactionServer) GetAll(context.Context, *GetAllRequest) (*GetAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTransactionServer) PushOne(context.Context, *PushOneRequest) (*PushOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushOne not implemented")
}
func (UnimplementedTransactionServer) PushThreeFour(context.Context, *PushThreeFourRequest) (*PushThreeFourReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushThreeFour not implemented")
}
func (UnimplementedTransactionServer) mustEmbedUnimplementedTransactionServer() {}

// UnsafeTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServer will
// result in compilation errors.
type UnsafeTransactionServer interface {
	mustEmbedUnimplementedTransactionServer()
}

func RegisterTransactionServer(s grpc.ServiceRegistrar, srv TransactionServer) {
	s.RegisterService(&Transaction_ServiceDesc, srv)
}

func _Transaction_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_SendTransactionEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionEthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).SendTransactionEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_SendTransactionEth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).SendTransactionEth(ctx, req.(*SendTransactionEthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Transaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_EthBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).EthBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_EthBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).EthBalance(ctx, req.(*EthBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GenerateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GenerateKey(ctx, req.(*GenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_TokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).TokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_TokenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).TokenBalance(ctx, req.(*TokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_VerifySig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).VerifySig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_VerifySig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).VerifySig(ctx, req.(*VerifySigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetReserves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetReserves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetReserves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetReserves(ctx, req.(*GetReservesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PushOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PushOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PushOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PushOne(ctx, req.(*PushOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PushThreeFour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushThreeFourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PushThreeFour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PushThreeFour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PushThreeFour(ctx, req.(*PushThreeFourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transaction_ServiceDesc is the grpc.ServiceDesc for Transaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.requestEth.v1.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _Transaction_SendTransaction_Handler,
		},
		{
			MethodName: "SendTransactionEth",
			Handler:    _Transaction_SendTransactionEth_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _Transaction_Transaction_Handler,
		},
		{
			MethodName: "EthBalance",
			Handler:    _Transaction_EthBalance_Handler,
		},
		{
			MethodName: "GenerateKey",
			Handler:    _Transaction_GenerateKey_Handler,
		},
		{
			MethodName: "TokenBalance",
			Handler:    _Transaction_TokenBalance_Handler,
		},
		{
			MethodName: "VerifySig",
			Handler:    _Transaction_VerifySig_Handler,
		},
		{
			MethodName: "GetReserves",
			Handler:    _Transaction_GetReserves_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Transaction_GetAll_Handler,
		},
		{
			MethodName: "PushOne",
			Handler:    _Transaction_PushOne_Handler,
		},
		{
			MethodName: "PushThreeFour",
			Handler:    _Transaction_PushThreeFour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/requestEth/v1/transaction.proto",
}
