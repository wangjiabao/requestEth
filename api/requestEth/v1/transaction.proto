syntax = "proto3";

package api.requestEth.v1;

import "google/api/annotations.proto";

option go_package = "requestEth/api/requestEth/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

service Transaction {
  rpc SendTransaction (SendTransactionRequest) returns (SendTransactionReply) {
    option (google.api.http) = {
      post: "/api/transaction"
      body: "send_body"
    };
  }

  rpc SendTransactionEth (SendTransactionEthRequest) returns (SendTransactionEthReply) {
    option (google.api.http) = {
      post: "/api/transaction_eth"
      body: "send_body"
    };
  }

  rpc Transaction (TransactionRequest) returns (TransactionReply) {
    option (google.api.http) = {
      get: "/api/transaction/{tx}"
    };
  }

  rpc EthBalance (EthBalanceRequest) returns (EthBalanceReply) {
    option (google.api.http) = {
      get: "/api/eth_balance"
    };
  }

  rpc GenerateKey (GenerateKeyRequest) returns (GenerateKeyReply) {
    option (google.api.http) = {
      get: "/api/generate_key"
    };
  }

  rpc TokenBalance (TokenBalanceRequest) returns (TokenBalanceReply) {
    option (google.api.http) = {
      get: "/api/usdt_balance"
    };
  }

  rpc VerifySig (VerifySigRequest) returns (VerifySigReply) {
    option (google.api.http) = {
      get: "/api/verify_sig"
    };
  }

  rpc GetReserves (GetReservesRequest) returns (GetReservesReply) {
    option (google.api.http) = {
      get: "/api/get_reserves"
    };
  }

  rpc GetAll (GetAllRequest) returns (GetAllReply) {
    option (google.api.http) = {
      get: "/api/get_all"
    };
  }

  rpc PushOne (PushOneRequest) returns (PushOneReply) {
    option (google.api.http) = {
      post: "/api/push_one"
      body: "send_body"
    };
  }

  rpc PushThreeFour (PushThreeFourRequest) returns (PushThreeFourReply) {
    option (google.api.http) = {
      post: "/api/push_three_four"
      body: "send_body"
    };
  }
}

message GetReservesRequest {
  string pair = 1;
}

message GetReservesReply {
  string reservesOne = 1;
  string reservesTwo = 2;
}

message GetAllRequest {
  string address = 1;
}

message GetAllReply {
  string one = 1; // usdt额度，铸造
  string two = 2; // aicat总铸造数量，铸造
  string three = 3; // 添加流动性usdt额度
  string four = 4; // 添加流动性aicat额度
  string lpAmount = 5; // 地址持有lp
  string lpAmountTotal = 6; // 全局持有lp
  string oneLength = 7; // 铸造使用u，记录数组当前长度
  string twoLength = 8; // 铸造产生b，记录数组当前长度
  string threeLength = 9; // 流动性u使用记录，负数是添加，正数是移除
  string fourLength = 10; // 流动性b使用记录，负数是添加，正数是移除
}

message PushOneRequest {
  message SendBody{
    string addressTwo = 2;
    repeated List address = 1;
    message List {
      string address = 1;
      string one = 2;
    }
  }

  SendBody send_body = 1;
}

message PushOneReply {
  string res = 1;
}

message PushThreeFourRequest {
  message SendBody{
    repeated List address = 1;
    message List {
      string address = 1;
      string three = 2;
      string Four = 3;
    }
  }

  SendBody send_body = 1;
}

message PushThreeFourReply {
  string res = 1;
}

message VerifySigRequest {
  string sign = 2;
  string content = 1;
}

message VerifySigReply {
  bool res = 1;
  string address = 2;
}

message TokenBalanceRequest {
  string token = 2;
  string address = 1;
}

message TokenBalanceReply {
  string balance = 1;
  string err = 2;
}

message SendTransactionRequest {
  message SendBody{
    string privateKey = 1;
    string toAddr = 2;
    string token = 4;
    string amount = 3;
  }

  SendBody send_body = 1;
}

message SendTransactionReply {
  string tx = 1;
  string err = 2;
}

message SendTransactionEthRequest {
  message SendBody{
    string privateKey = 1;
    string toAddr = 2;
    string amount = 3;
  }

  SendBody send_body = 1;
}

message SendTransactionEthReply {
  string tx = 1;
  string err = 2;
}

message EthBalanceRequest {
  string address = 1;
}

message EthBalanceReply {
  string balance = 1;
  string err = 2;
}


message TransactionRequest {
  string tx = 1;
}

message TransactionReply {
  uint64 status = 1;
}

message GenerateKeyRequest {
}

message GenerateKeyReply {
  string address = 1;
  string privateKey = 2;
  string err = 3;
}